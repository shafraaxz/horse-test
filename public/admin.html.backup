<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - The Horse Futsal League</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #4285F4;
            --primary-dark: #1a73e8;
            --primary-light: #6ba1f7;
            --secondary: #1f2c56;
            --accent: #4285F4;
            --danger: #ff4757;
            --warning: #ffd93d;
            --success: #26de81;
            --text: #ffffff;
            --text-secondary: #b8bcc8;
            --bg-dark: #0a0e1a;
            --bg-card: #141b2d;
            --border: #2a3441;
            --live: #ff0000;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, var(--bg-dark) 0%, var(--secondary) 100%);
            color: var(--text);
            min-height: 100vh;
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        .header {
            background: var(--bg-card);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            border: 2px solid var(--danger);
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .admin-logo {
            width: 60px;
            height: 60px;
            border-radius: 10px;
            background: var(--danger);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
        }

        .admin-title {
            font-size: 28px;
            font-weight: bold;
            background: linear-gradient(135deg, var(--danger), var(--warning));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .header-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .back-btn {
            padding: 8px 16px;
            background: var(--secondary);
            color: white;
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s;
        }

        .back-btn:hover {
            background: var(--primary);
            transform: translateY(-2px);
        }

        /* Navigation */
        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .nav-tab {
            padding: 12px 24px;
            background: var(--bg-card);
            border: 2px solid var(--border);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 500;
            color: var(--text);
            text-decoration: none;
        }

        .nav-tab:hover {
            background: var(--primary-dark);
            border-color: var(--primary);
            transform: translateY(-2px);
        }

        .nav-tab.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        /* Content Sections */
        .content-section {
            display: none;
            animation: fadeIn 0.5s;
        }

        .content-section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Cards */
        .card {
            background: var(--bg-card);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.3);
            border: 1px solid rgba(66, 133, 244, 0.2);
        }

        .card-title {
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 20px;
            color: var(--primary);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        /* Forms */
        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            color: var(--text-secondary);
            font-weight: 500;
        }

        input, select, textarea {
            width: 100%;
            padding: 12px;
            background: var(--bg-dark);
            border: 2px solid var(--border);
            border-radius: 8px;
            color: var(--text);
            font-size: 14px;
            transition: all 0.3s;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--primary);
            background: #1a1f2e;
            box-shadow: 0 0 0 3px rgba(66, 133, 244, 0.1);
        }

        .btn {
            padding: 12px 24px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
            display: inline-block;
            text-decoration: none;
        }

        .btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(66, 133, 244, 0.3);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-danger {
            background: var(--danger);
        }

        .btn-secondary {
            background: var(--secondary);
        }

        .btn-success {
            background: var(--success);
        }

        .btn-warning {
            background: var(--warning);
            color: var(--bg-dark);
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
        }

        /* Grid layouts */
        .grid-2 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .grid-3 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .grid-4 {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        /* League selector */
        .league-selector select {
            padding: 8px 12px;
            background: var(--bg-dark);
            border: 2px solid var(--border);
            border-radius: 8px;
            color: var(--text);
            font-size: 14px;
            min-width: 200px;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            background: var(--bg-card);
            padding: 30px;
            border-radius: 15px;
            max-width: 800px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            border: 2px solid var(--primary);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .close-modal {
            font-size: 24px;
            cursor: pointer;
            color: var(--text-secondary);
            background: none;
            border: none;
        }

        .close-modal:hover {
            color: var(--danger);
        }

        /* Loading Spinner */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Hidden by default */
        .hidden {
            display: none;
        }

        /* Admin specific styles */
        .admin-notice {
            background: linear-gradient(135deg, var(--danger), var(--warning));
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: bold;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }

        .quick-action-card {
            background: var(--bg-dark);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            border: 2px solid var(--border);
        }

        .quick-action-card:hover {
            border-color: var(--primary);
            transform: translateY(-5px);
        }

        .quick-action-icon {
            font-size: 32px;
            margin-bottom: 10px;
            display: block;
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            animation: slideIn 0.3s;
            z-index: 2000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        .toast.error {
            background: var(--danger);
        }

        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        /* Schedule generation specific styles */
        .schedule-preview {
            max-height: 400px;
            overflow-y: auto;
            border: 2px solid var(--border);
            border-radius: 8px;
            padding: 15px;
            background: var(--bg-dark);
        }

        .round-group {
            margin-bottom: 20px;
            padding: 15px;
            background: var(--bg-card);
            border-radius: 8px;
        }

        .round-title {
            font-weight: bold;
            color: var(--primary);
            margin-bottom: 10px;
            border-bottom: 1px solid var(--border);
            padding-bottom: 5px;
        }

        .match-preview {
            padding: 8px;
            margin-bottom: 5px;
            background: var(--bg-dark);
            border-radius: 5px;
            font-size: 14px;
        }

        /* Time periods styles */
        .time-period-item {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-bottom: 8px;
        }

        .time-period-input {
            flex: 1;
        }

        /* Bulk Editor Styles */
        .bulk-match-item {
            transition: all 0.3s ease;
        }

        .bulk-match-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(66, 133, 244, 0.2);
        }

        .bulk-match-item.selected {
            border-color: var(--primary) !important;
            background: rgba(66, 133, 244, 0.1) !important;
        }

        #selectedMatchCount {
            animation: pulse 0.5s ease-in-out;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                text-align: center;
                gap: 15px;
            }

            .nav-tabs {
                justify-content: center;
            }

            .grid-2, .grid-3, .grid-4 {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="logo-section">
                <div class="admin-logo">🔒</div>
                <div>
                    <div class="admin-title">Admin Panel</div>
                    <div class="league-selector">
                        <select id="leagueSelect">
                            <option value="">Select a League</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="header-controls">
                <a href="/" class="back-btn">← Back to Site</a>
                <div id="userInfo" class="hidden">
                    <span>Welcome, <strong id="username"></strong></span>
                    <button class="btn btn-secondary btn-small" id="logoutBtn">Logout</button>
                </div>
            </div>
        </div>

        <div class="admin-notice">
            🔐 Administrative Access Required - Manage leagues, teams, players, and live matches
        </div>

        <!-- Login Form -->
        <div id="adminLoginForm">
            <div class="card">
                <div class="card-title">🔒 Admin Login</div>
                <div class="form-group">
                    <label>Username</label>
                    <input type="text" id="adminUsername" placeholder="Enter username">
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <input type="password" id="adminPassword" placeholder="Enter password">
                </div>
                <button class="btn" onclick="adminLogin()" style="width: 100%;" id="loginButton">
                    <span id="loginText">Login</span>
                    <span id="loginSpinner" class="loading hidden"></span>
                </button>
            </div>
        </div>

        <!-- Admin Panel (Hidden until login) -->
        <div id="adminPanel" class="hidden">
            <!-- Navigation -->
            <div class="nav-tabs">
                <div class="nav-tab active" data-section="dashboard">🏠 Dashboard</div>
                <div class="nav-tab" data-section="leagues">🏆 Leagues</div>
                <div class="nav-tab" data-section="teams">👥 Teams</div>
                <div class="nav-tab" data-section="players">⚽ Players</div>
                <div class="nav-tab" data-section="matches">📅 Matches</div>
                <div class="nav-tab" data-section="live">🔴 Live</div>
                <div class="nav-tab" data-section="admin">👤 Admin</div>
            </div>

            <!-- Dashboard Section -->
            <div id="dashboard" class="content-section active">
                <div class="quick-actions">
                    <div class="quick-action-card" onclick="showSection('leagues')">
                        <span class="quick-action-icon">🏆</span>
                        <h3>Manage Leagues</h3>
                        <p>Create and manage tournaments</p>
                    </div>
                    <div class="quick-action-card" onclick="showSection('teams')">
                        <span class="quick-action-icon">👥</span>
                        <h3>Manage Teams</h3>
                        <p>Add teams and players</p>
                    </div>
                    <div class="quick-action-card" onclick="openScheduleModal()">
                        <span class="quick-action-icon">📅</span>
                        <h3>Generate Schedule</h3>
                        <p>Create match fixtures</p>
                    </div>
                    <div class="quick-action-card" onclick="showSection('matches'); setTimeout(openBulkMatchEditor, 100);">
                        <span class="quick-action-icon">📝</span>
                        <h3>Bulk Edit Matches</h3>
                        <p>Edit multiple match times and dates</p>
                    </div>
                    <div class="quick-action-card" onclick="showSection('live')">
                        <span class="quick-action-icon">🔴</span>
                        <h3>Live Matches</h3>
                        <p>Manage live scoring</p>
                    </div>
                </div>

                <div class="card">
                    <div class="card-title">📊 Overview</div>
                    <div class="grid-4">
                        <div style="background: var(--bg-dark); padding: 20px; border-radius: 10px; text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: var(--primary);" id="totalLeagues">0</div>
                            <div style="color: var(--text-secondary);">Leagues</div>
                        </div>
                        <div style="background: var(--bg-dark); padding: 20px; border-radius: 10px; text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: var(--success);" id="totalTeams">0</div>
                            <div style="color: var(--text-secondary);">Teams</div>
                        </div>
                        <div style="background: var(--bg-dark); padding: 20px; border-radius: 10px; text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: var(--warning);" id="totalMatches">0</div>
                            <div style="color: var(--text-secondary);">Matches</div>
                        </div>
                        <div style="background: var(--bg-dark); padding: 20px; border-radius: 10px; text-align: center;">
                            <div style="font-size: 32px; font-weight: bold; color: var(--live);" id="liveCount">0</div>
                            <div style="color: var(--text-secondary);">Live Now</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Leagues Section -->
            <div id="leagues" class="content-section">
                <div class="card">
                    <div class="card-title">
                        <span>🏆 League Management</span>
                        <button class="btn" onclick="openLeagueModal()">+ Create League</button>
                    </div>
                    
                    <div id="leaguesList">
                        <p style="color: var(--text-secondary)">Loading leagues...</p>
                    </div>
                </div>
            </div>

            <!-- Teams Section -->
            <div id="teams" class="content-section">
                <div class="card">
                    <div class="card-title">
                        <span>👥 Team Management</span>
                        <button class="btn" onclick="openTeamModal()" id="addTeamBtn" style="display: none;">+ Add Team</button>
                    </div>
                    
                    <div id="noLeagueSelectedTeams" class="hidden">
                        <p style="color: var(--text-secondary); text-align: center; padding: 40px;">
                            Please select a league from the dropdown above to manage teams.
                        </p>
                    </div>
                    
                    <div id="teamsList">
                        <p style="color: var(--text-secondary)">No teams added yet</p>
                    </div>
                </div>
            </div>

            <!-- Players Section -->
            <div id="players" class="content-section">
                <div class="card">
                    <div class="card-title">
                        <span>⚽ Player Management</span>
                        <button class="btn" onclick="openPlayerModal()" id="addPlayerBtn" style="display: none;">+ Add Player</button>
                    </div>
                    
                    <div id="noLeagueSelectedPlayers" class="hidden">
                        <p style="color: var(--text-secondary); text-align: center; padding: 40px;">
                            Please select a league from the dropdown above to manage players.
                        </p>
                    </div>
                    
                    <div id="playersList">
                        <p style="color: var(--text-secondary)">No players added yet</p>
                    </div>
                </div>
            </div>

            <!-- Matches Section -->
            <div id="matches" class="content-section">
                <div class="card">
                    <div class="card-title">
                        <span>📅 Match Management</span>
                        <div>
                            <button class="btn btn-warning" onclick="openBulkMatchEditor()" id="bulkEditBtn" style="display: none;">📝 Bulk Edit</button>
                            <button class="btn" onclick="openScheduleModal()" id="generateScheduleBtn" style="display: none;">Generate Schedule</button>
                            <button class="btn btn-secondary" onclick="openAddMatchModal()" id="addMatchBtn" style="display: none;">+ Add Match</button>
                        </div>
                    </div>
                    
                    <div id="noLeagueSelectedMatches" class="hidden">
                        <p style="color: var(--text-secondary); text-align: center; padding: 40px;">
                            Please select a league from the dropdown above to manage matches.
                        </p>
                    </div>
                    
                    <div id="matchesList">
                        <p style="color: var(--text-secondary)">No matches scheduled</p>
                    </div>
                </div>
            </div>

            <!-- Live Section -->
            <div id="live" class="content-section">
                <div class="card">
                    <div class="card-title">🔴 Live Match Management</div>
                    
                    <div id="noLeagueSelectedLive" class="hidden">
                        <p style="color: var(--text-secondary); text-align: center; padding: 40px;">
                            Please select a league from the dropdown above to manage live matches.
                        </p>
                    </div>
                    
                    <div id="liveContent">
                        <div id="matchSelectionList"></div>
                        
                        <div id="activeLiveMatch" class="hidden">
                            <!-- Live match content will be inserted here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Admin Section -->
            <div id="admin" class="content-section">
                <div class="card">
                    <div class="card-title">
                        <span>👤 Admin Management</span>
                        <div>
                            <button class="btn btn-warning" onclick="openChangePasswordModal()">🔑 Change Password</button>
                            <button class="btn" onclick="openUserModal()">+ Add Admin</button>
                        </div>
                    </div>
                    
                    <div id="adminsList">
                        <p style="color: var(--text-secondary)">Loading admins...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- League Modal -->
    <div id="leagueModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="leagueModalTitle">Create New League</h2>
                <button class="close-modal" onclick="closeModal('leagueModal')">&times;</button>
            </div>
            <div>
                <div class="form-group">
                    <label>League Name *</label>
                    <input type="text" id="leagueName" placeholder="e.g., Spring Tournament 2024" required>
                </div>
                <div class="form-group">
                    <label>League Logo</label>
                    <input type="file" id="leagueLogo" accept="image/*">
                </div>
                <div style="display: flex; gap: 10px;">
                    <button class="btn btn-secondary" onclick="closeModal('leagueModal')">Cancel</button>
                    <button class="btn" onclick="saveLeague()" id="createLeagueButton">
                        <span id="createLeagueText">Create League</span>
                        <span id="createLeagueSpinner" class="loading hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Team Modal -->
    <div id="teamModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="teamModalTitle">Add New Team</h2>
                <button class="close-modal" onclick="closeModal('teamModal')">&times;</button>
            </div>
            <div>
                <div class="form-group">
                    <label>Team Name *</label>
                    <input type="text" id="teamName" placeholder="e.g., Thunder Horses" required>
                </div>
                <div class="form-group">
                    <label>Coach</label>
                    <input type="text" id="teamCoach" placeholder="e.g., Ahmed Hassan">
                </div>
                <div class="form-group">
                    <label>Stadium</label>
                    <input type="text" id="teamStadium" placeholder="e.g., Central Arena">
                </div>
                <div class="form-group">
                    <label>Team Logo</label>
                    <input type="file" id="teamLogo" accept="image/*">
                </div>
                <div style="display: flex; gap: 10px;">
                    <button class="btn btn-secondary" onclick="closeModal('teamModal')">Cancel</button>
                    <button class="btn" onclick="saveTeam()" id="createTeamButton">
                        <span id="createTeamText">Add Team</span>
                        <span id="createTeamSpinner" class="loading hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Player Modal -->
    <div id="playerModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="playerModalTitle">Add New Player</h2>
                <button class="close-modal" onclick="closeModal('playerModal')">&times;</button>
            </div>
            <div>
                <div class="form-group">
                    <label>Player Name *</label>
                    <input type="text" id="playerName" placeholder="e.g., Ahmed Mohamed" required>
                </div>
                <div class="form-group">
                    <label>Jersey Number *</label>
                    <input type="number" id="playerNumber" placeholder="e.g., 10" min="1" max="99" required>
                </div>
                <div class="form-group">
                    <label>Position *</label>
                    <select id="playerPosition" required>
                        <option value="">Select Position</option>
                        <option value="GK">Goalkeeper (GK)</option>
                        <option value="DEF">Defender (DEF)</option>
                        <option value="MID">Midfielder (MID)</option>
                        <option value="FW">Forward (FW)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Team *</label>
                    <select id="playerTeam" required>
                        <option value="">Select Team</option>
                    </select>
                </div>
                <div style="display: flex; gap: 10px;">
                    <button class="btn btn-secondary" onclick="closeModal('playerModal')">Cancel</button>
                    <button class="btn" onclick="savePlayer()" id="createPlayerButton">
                        <span id="createPlayerText">Add Player</span>
                        <span id="createPlayerSpinner" class="loading hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Schedule Generation Modal -->
    <div id="scheduleModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>🗓️ Generate Full Season Schedule</h2>
                <button class="close-modal" onclick="closeModal('scheduleModal')">&times;</button>
            </div>
            <div>
                <div class="form-group">
                    <label>Tournament Format</label>
                    <select id="tournamentFormat">
                        <option value="double-round-robin">Double Round Robin (Each team plays every other team twice)</option>
                        <option value="single-round-robin">Single Round Robin (Each team plays every other team once)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Start Date *</label>
                    <input type="date" id="scheduleStartDate" required>
                </div>
                <div class="form-group">
                    <label>Days Between Rounds</label>
                    <select id="daysBetweenRounds">
                        <option value="3">3 days</option>
                        <option value="7" selected>1 week</option>
                        <option value="14">2 weeks</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Match Time Periods</label>
                    <div id="timePeriodsContainer" style="margin-bottom: 10px;">
                        <div class="time-period-item">
                            <input type="time" class="time-period-input" value="18:00" style="flex: 1;">
                            <button type="button" class="btn btn-small btn-danger" onclick="removeTimePeriod(this)" style="display: none;">Remove</button>
                        </div>
                    </div>
                    <button type="button" class="btn btn-small btn-secondary" onclick="addTimePeriod()">+ Add Time Period</button>
                    <p style="color: var(--text-secondary); font-size: 12px; margin-top: 5px;">
                        Multiple time periods will be used cyclically for matches in each round
                    </p>
                </div>
                
                <div style="margin: 20px 0;">
                    <button class="btn btn-secondary" onclick="generateSchedulePreview()" id="previewScheduleBtn">
                        Preview Schedule
                    </button>
                </div>
                
                <div id="schedulePreviewContainer" class="hidden">
                    <h4 style="color: var(--primary); margin-bottom: 15px;">📋 Schedule Preview</h4>
                    <div id="scheduleInfo" style="margin-bottom: 15px; color: var(--text-secondary);"></div>
                    <div id="schedulePreview" class="schedule-preview"></div>
                </div>
                
                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button class="btn btn-secondary" onclick="closeModal('scheduleModal')">Cancel</button>
                    <button class="btn" onclick="generateAndSaveSchedule()" id="generateScheduleButton" disabled>
                        <span id="generateScheduleText">Generate & Save Schedule</span>
                        <span id="generateScheduleSpinner" class="loading hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Match Modal -->
    <div id="addMatchModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="matchModalTitle">Add Single Match</h2>
                <button class="close-modal" onclick="closeModal('addMatchModal')">&times;</button>
            </div>
            <div>
                <div class="form-group">
                    <label>Home Team *</label>
                    <div style="display: flex; gap: 10px; align-items: center;">
                        <select id="matchHomeTeam" required style="flex: 1;">
                            <option value="">Select Home Team</option>
                        </select>
                        <button type="button" class="btn btn-small btn-secondary" onclick="randomizeTeams()">🎲 Random</button>
                    </div>
                </div>
                <div class="form-group">
                    <label>Away Team *</label>
                    <select id="matchAwayTeam" required>
                        <option value="">Select Away Team</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Date *</label>
                    <input type="date" id="matchDate" required>
                </div>
                <div class="form-group">
                    <label>Time *</label>
                    <input type="time" id="matchTime" value="18:00" required>
                </div>
                <div class="form-group">
                    <label>Round</label>
                    <input type="number" id="matchRound" value="1" min="1">
                </div>
                <div style="display: flex; gap: 10px;">
                    <button class="btn btn-secondary" onclick="closeModal('addMatchModal')">Cancel</button>
                    <button class="btn" onclick="saveMatch()" id="createMatchButton">
                        <span id="createMatchText">Add Match</span>
                        <span id="createMatchSpinner" class="loading hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bulk Match Editor Modal -->
    <div id="bulkMatchModal" class="modal">
        <div class="modal-content" style="max-width: 1200px;">
            <div class="modal-header">
                <h2>📅 Bulk Match Editor</h2>
                <button class="close-modal" onclick="closeModal('bulkMatchModal')">&times;</button>
            </div>
            <div>
                <!-- Filter Section -->
                <div style="background: var(--bg-dark); padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                    <h3 style="color: var(--primary); margin-bottom: 15px;">🔍 Filter Matches</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        <div>
                            <label>Status Filter</label>
                            <select id="bulkStatusFilter" onchange="filterBulkMatches()">
                                <option value="all">All Matches</option>
                                <option value="scheduled" selected>Scheduled Only</option>
                                <option value="live">Live Matches</option>
                                <option value="finished">Finished Matches</option>
                            </select>
                        </div>
                        <div>
                            <label>Round Filter</label>
                            <select id="bulkRoundFilter" onchange="filterBulkMatches()">
                                <option value="all">All Rounds</option>
                            </select>
                        </div>
                        <div>
                            <label>Date Filter</label>
                            <select id="bulkDateFilter" onchange="filterBulkMatches()">
                                <option value="all">All Dates</option>
                            </select>
                        </div>
                        <div>
                            <label>Time Filter</label>
                            <select id="bulkTimeFilter" onchange="filterBulkMatches()">
                                <option value="all">All Times</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Quick Selection Buttons -->
                    <div style="margin-top: 15px; display: flex; gap: 10px; flex-wrap: wrap;">
                        <button class="btn btn-small btn-secondary" onclick="selectAllMatches()">✅ Select All</button>
                        <button class="btn btn-small btn-secondary" onclick="selectNoneMatches()">❌ Select None</button>
                        <button class="btn btn-small btn-secondary" onclick="selectSameDateMatches()">📅 Same Date</button>
                        <button class="btn btn-small btn-secondary" onclick="selectSameTimeMatches()">🕐 Same Time</button>
                        <button class="btn btn-small btn-secondary" onclick="selectSameRoundMatches()">🔄 Same Round</button>
                    </div>
                </div>

                <!-- Matches Selection List -->
                <div style="max-height: 400px; overflow-y: auto; background: var(--bg-dark); border-radius: 10px; padding: 15px; margin-bottom: 20px;">
                    <h3 style="color: var(--primary); margin-bottom: 15px;">
                        📋 Select Matches to Edit 
                        <span id="selectedMatchCount" style="color: var(--warning);">(0 selected)</span>
                    </h3>
                    <div id="bulkMatchesList">
                        <!-- Matches will be populated here -->
                    </div>
                </div>

                <!-- Bulk Edit Actions -->
                <div style="background: var(--bg-dark); padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                    <h3 style="color: var(--primary); margin-bottom: 15px;">⚙️ Bulk Edit Actions</h3>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">
                        <!-- Date Operations -->
                        <div>
                            <h4 style="color: var(--success); margin-bottom: 10px;">📅 Date Operations</h4>
                            <div class="form-group">
                                <label>Set New Date</label>
                                <input type="date" id="bulkNewDate" style="margin-bottom: 10px;">
                                <button class="btn btn-small btn-success" onclick="bulkSetDate()" style="width: 100%;">
                                    Set Date for Selected
                                </button>
                            </div>
                            
                            <div class="form-group">
                                <label>Shift Dates</label>
                                <div style="display: flex; gap: 5px; align-items: center;">
                                    <input type="number" id="bulkShiftDays" value="0" min="-365" max="365" style="width: 80px;">
                                    <span style="color: var(--text-secondary);">days</span>
                                    <button class="btn btn-small btn-warning" onclick="bulkShiftDates()">
                                        Shift Dates
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Time Operations -->
                        <div>
                            <h4 style="color: var(--primary); margin-bottom: 10px;">🕐 Time Operations</h4>
                            <div class="form-group">
                                <label>Set New Time</label>
                                <input type="time" id="bulkNewTime" style="margin-bottom: 10px;">
                                <button class="btn btn-small" onclick="bulkSetTime()" style="width: 100%;">
                                    Set Time for Selected
                                </button>
                            </div>
                            
                            <div class="form-group">
                                <label>Shift Times</label>
                                <div style="display: flex; gap: 5px; align-items: center;">
                                    <input type="number" id="bulkShiftHours" value="0" min="-23" max="23" style="width: 60px;">
                                    <span style="color: var(--text-secondary);">hours</span>
                                    <input type="number" id="bulkShiftMinutes" value="0" min="-59" max="59" style="width: 60px;">
                                    <span style="color: var(--text-secondary);">min</span>
                                    <button class="btn btn-small btn-warning" onclick="bulkShiftTimes()">
                                        Shift Times
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Additional Operations -->
                    <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid var(--border);">
                        <h4 style="color: var(--warning); margin-bottom: 10px;">🔧 Additional Operations</h4>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                            <div class="form-group">
                                <label>Set Venue for Selected</label>
                                <div style="display: flex; gap: 5px;">
                                    <input type="text" id="bulkNewVenue" placeholder="Enter venue" style="flex: 1;">
                                    <button class="btn btn-small btn-secondary" onclick="bulkSetVenue()">
                                        Set Venue
                                    </button>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label>Set Round for Selected</label>
                                <div style="display: flex; gap: 5px;">
                                    <input type="number" id="bulkNewRound" value="1" min="1" style="width: 80px;">
                                    <button class="btn btn-small btn-secondary" onclick="bulkSetRound()">
                                        Set Round
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div style="display: flex; gap: 10px; justify-content: flex-end;">
                    <button class="btn btn-secondary" onclick="closeModal('bulkMatchModal')">Cancel</button>
                    <button class="btn btn-success" onclick="applyBulkChanges()" id="applyBulkButton">
                        <span id="applyBulkText">Apply Changes</span>
                        <span id="applyBulkSpinner" class="loading hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Change Password Modal -->
    <div id="changePasswordModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>🔑 Change Password</h2>
                <button class="close-modal" onclick="closeModal('changePasswordModal')">&times;</button>
            </div>
            <div>
                <div class="form-group">
                    <label>Current Password *</label>
                    <input type="password" id="currentPassword" placeholder="Enter current password" required>
                </div>
                <div class="form-group">
                    <label>New Password *</label>
                    <input type="password" id="newPasswordChange" placeholder="Enter new password" required>
                </div>
                <div class="form-group">
                    <label>Confirm New Password *</label>
                    <input type="password" id="confirmPassword" placeholder="Confirm new password" required>
                </div>
                <div style="display: flex; gap: 10px;">
                    <button class="btn btn-secondary" onclick="closeModal('changePasswordModal')">Cancel</button>
                    <button class="btn" onclick="changePassword()" id="changePasswordButton">
                        <span id="changePasswordText">Change Password</span>
                        <span id="changePasswordSpinner" class="loading hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Admin Modal -->
    <div id="userModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="userModalTitle">Add New Admin</h2>
                <button class="close-modal" onclick="closeModal('userModal')">&times;</button>
            </div>
            <div>
                <div class="form-group">
                    <label>Username *</label>
                    <input type="text" id="newUsername" placeholder="Enter username" required>
                </div>
                <div class="form-group">
                    <label>Password *</label>
                    <input type="password" id="newPassword" placeholder="Enter password" required>
                </div>
                <div class="form-group">
                    <label>Role *</label>
                    <select id="newUserRole" required>
                        <option value="">Select Role</option>
                        <option value="admin">Admin (Full Access)</option>
                        <option value="moderator">Moderator (Limited Access)</option>
                        <option value="scorer">Scorer (Live Matches Only)</option>
                    </select>
                </div>
                <div style="display: flex; gap: 10px;">
                    <button class="btn btn-secondary" onclick="closeModal('userModal')">Cancel</button>
                    <button class="btn" onclick="saveAdmin()" id="createUserButton">
                        <span id="createUserText">Add Admin</span>
                        <span id="createUserSpinner" class="loading hidden"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Production Admin Panel JavaScript
        let appData = {
            currentUser: null,
            authToken: null,
            isLoggedIn: false,
            selectedLeague: null,
            leagues: [],
            teams: [],
            players: [],
            matches: [],
            liveMatches: [],
            generatedSchedule: null,
            editingItem: null,
            admins: []
        };

        // Bulk Match Editor Data
        let bulkMatchData = {
            allMatches: [],
            filteredMatches: [],
            selectedMatches: new Set(),
            pendingChanges: []
        };

        // Live Match Timer Variables
        let matchTimer = null;
        let isMatchPaused = false;

        const API_BASE = window.location.origin + '/api';

        // Initialize Application
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            checkAuthToken();
            initializeDatabase();
        });

        // Setup event listeners
        function setupEventListeners() {
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.addEventListener('click', function() {
                    const section = this.getAttribute('data-section');
                    showSection(section);
                });
            });

            document.getElementById('leagueSelect').addEventListener('change', function() {
                appData.selectedLeague = this.value;
                onLeagueChange();
            });

            document.getElementById('logoutBtn').addEventListener('click', adminLogout);

            document.getElementById('adminPassword').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    adminLogin();
                }
            });

            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('modal')) {
                    e.target.classList.remove('active');
                }
            });
        }

        // Initialize database
        async function initializeDatabase() {
            try {
                await fetch(`${API_BASE}/init`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
            } catch (error) {
                console.error('Database initialization error:', error);
            }
        }

        // Check for existing auth token
        function checkAuthToken() {
            const token = localStorage.getItem('adminToken');
            const user = localStorage.getItem('adminUser');
            
            if (token && user) {
                try {
                    appData.authToken = token;
                    appData.currentUser = JSON.parse(user);
                    appData.isLoggedIn = true;
                    updateLoginState();
                    loadInitialData();
                } catch (error) {
                    localStorage.removeItem('adminToken');
                    localStorage.removeItem('adminUser');
                }
            }
        }

        // Enhanced API call function
        async function apiCall(endpoint, options = {}) {
            const config = {
                headers: {
                    'Content-Type': 'application/json',
                    ...(appData.authToken && { 'Authorization': `Bearer ${appData.authToken}` })
                },
                ...options
            };

            try {
                const response = await fetch(`${API_BASE}${endpoint}`, config);
                
                if (!response.ok) {
                    if (response.status === 401) {
                        adminLogout();
                        throw new Error('Session expired. Please login again.');
                    }
                    const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
                    throw new Error(errorData.error || `HTTP ${response.status}`);
                }
                
                return await response.json();
            } catch (error) {
                console.error(`API call failed for ${endpoint}:`, error);
                throw error;
            }
        }

        // Authentication Functions
        async function adminLogin() {
            const username = document.getElementById('adminUsername').value.trim();
            const password = document.getElementById('adminPassword').value;

            if (!username || !password) {
                showToast('Please enter username and password', 'error');
                return;
            }

            setLoading('login', true);

            try {
                const response = await fetch(`${API_BASE}/auth/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });

                const result = await response.json();

                if (response.ok) {
                    appData.currentUser = result.user;
                    appData.authToken = result.token;
                    appData.isLoggedIn = true;
                    
                    localStorage.setItem('adminToken', result.token);
                    localStorage.setItem('adminUser', JSON.stringify(result.user));
                    
                    updateLoginState();
                    loadInitialData();
                    showToast('Login successful!');
                } else {
                    throw new Error(result.error || 'Login failed');
                }
            } catch (error) {
                showToast(error.message || 'Login failed', 'error');
            } finally {
                setLoading('login', false);
            }
        }

        function adminLogout() {
            appData.currentUser = null;
            appData.authToken = null;
            appData.isLoggedIn = false;
            
            localStorage.removeItem('adminToken');
            localStorage.removeItem('adminUser');
            
            updateLoginState();
            showToast('Logged out successfully');
        }

        // UI Update Functions
        function updateLoginState() {
            const loginForm = document.getElementById('adminLoginForm');
            const adminPanel = document.getElementById('adminPanel');
            const userInfo = document.getElementById('userInfo');

            if (appData.isLoggedIn) {
                loginForm.classList.add('hidden');
                adminPanel.classList.remove('hidden');
                userInfo.classList.remove('hidden');
                document.getElementById('username').textContent = appData.currentUser.username;
            } else {
                loginForm.classList.remove('hidden');
                adminPanel.classList.add('hidden');
                userInfo.classList.add('hidden');
            }
        }

        // Load initial data
        async function loadInitialData() {
            try {
                await loadLeagues();
                await loadAdmins();
                updateOverviewStats();
            } catch (error) {
                console.error('Failed to load initial data:', error);
                showToast('Failed to load initial data', 'error');
            }
        }

        // League Management
        async function loadLeagues() {
            try {
                const leagues = await apiCall('/leagues');
                appData.leagues = leagues;
                updateLeagueSelector();
                renderLeagues();
                updateOverviewStats();
            } catch (error) {
                console.error('Failed to load leagues:', error);
                showToast('Failed to load leagues', 'error');
            }
        }

        async function saveLeague() {
            const name = document.getElementById('leagueName').value.trim();
            
            if (!name) {
                showToast('Please enter league name', 'error');
                return;
            }

            setLoading('createLeague', true);

            try {
                const leagueData = { name };
                
                // Handle logo upload if file selected
                const logoFile = document.getElementById('leagueLogo').files[0];
                if (logoFile) {
                    // Convert to base64 for Cloudinary
                    const base64Logo = await fileToBase64(logoFile);
                    leagueData.logo = base64Logo;
                }

                if (appData.editingItem) {
                    // For editing, we'll delete and recreate since the API doesn't support PUT
                    // This is a temporary solution - ideally the API should support PUT
                    showToast('Editing leagues not supported yet. Please create a new league.', 'warning');
                    setLoading('createLeague', false);
                    return;
                } else {
                    await apiCall('/leagues', {
                        method: 'POST',
                        body: JSON.stringify(leagueData)
                    });
                    showToast('League created successfully!');
                }

                await loadLeagues();
                closeModal('leagueModal');
                
                // Reset form
                document.getElementById('leagueName').value = '';
                document.getElementById('leagueLogo').value = '';
                appData.editingItem = null;
                
            } catch (error) {
                console.error('Save league error:', error);
                showToast(error.message || 'Failed to save league', 'error');
            } finally {
                setLoading('createLeague', false);
            }
        }

        async function deleteLeague(leagueId) {
            if (!confirm('Are you sure you want to delete this league? This will also delete all teams, players, and matches.')) {
                return;
            }

            try {
                await apiCall(`/leagues?id=${leagueId}`, {
                    method: 'DELETE'
                });

                await loadLeagues();
                
                // Reset if this was the selected league
                if (appData.selectedLeague === leagueId) {
                    appData.selectedLeague = null;
                    onLeagueChange();
                }
                
                showToast('League deleted successfully!');
            } catch (error) {
                showToast(error.message || 'Failed to delete league', 'error');
            }
        }

        function editLeague(leagueId) {
            const league = appData.leagues.find(l => l._id === leagueId);
            if (league) {
                appData.editingItem = leagueId;
                document.getElementById('leagueName').value = league.name;
                document.getElementById('leagueModalTitle').textContent = 'Edit League';
                document.getElementById('createLeagueText').textContent = 'Update League';
                document.getElementById('leagueModal').classList.add('active');
            }
        }

        function selectLeague(leagueId) {
            appData.selectedLeague = leagueId;
            document.getElementById('leagueSelect').value = leagueId;
            onLeagueChange();
        }

        // Team Management
        async function saveTeam() {
            const name = document.getElementById('teamName').value.trim();
            
            if (!name) {
                showToast('Please enter team name', 'error');
                return;
            }

            if (!appData.selectedLeague) {
                showToast('Please select a league first', 'error');
                return;
            }

            setLoading('createTeam', true);

            try {
                const teamData = {
                    name,
                    coach: document.getElementById('teamCoach').value.trim(),
                    stadium: document.getElementById('teamStadium').value.trim(),
                    leagueId: appData.selectedLeague
                };
                
                // Handle logo upload if file selected
                const logoFile = document.getElementById('teamLogo').files[0];
                if (logoFile) {
                    const base64Logo = await fileToBase64(logoFile);
                    teamData.logo = base64Logo;
                }

                if (appData.editingItem) {
                    teamData.id = appData.editingItem;
                    await apiCall('/teams', {
                        method: 'PUT',
                        body: JSON.stringify(teamData)
                    });
                    showToast('Team updated successfully!');
                } else {
                    await apiCall('/teams', {
                        method: 'POST',
                        body: JSON.stringify(teamData)
                    });
                    showToast('Team created successfully!');
                }

                await loadLeagueData(appData.selectedLeague);
                closeModal('teamModal');
                
                // Reset form
                document.getElementById('teamName').value = '';
                document.getElementById('teamCoach').value = '';
                document.getElementById('teamStadium').value = '';
                document.getElementById('teamLogo').value = '';
                appData.editingItem = null;
                
            } catch (error) {
                console.error('Save team error:', error);
                showToast(error.message || 'Failed to save team', 'error');
            } finally {
                setLoading('createTeam', false);
            }
        }

        async function deleteTeam(teamId) {
            if (!confirm('Are you sure you want to delete this team? This will also delete all players in the team.')) {
                return;
            }

            try {
                await apiCall(`/teams?id=${teamId}`, {
                    method: 'DELETE'
                });

                await loadLeagueData(appData.selectedLeague);
                showToast('Team deleted successfully!');
            } catch (error) {
                showToast(error.message || 'Failed to delete team', 'error');
            }
        }

        // Player Management
        async function savePlayer() {
            const name = document.getElementById('playerName').value.trim();
            const number = parseInt(document.getElementById('playerNumber').value);
            const position = document.getElementById('playerPosition').value;
            const teamId = document.getElementById('playerTeam').value;
            
            if (!name || !number || !position || !teamId) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            setLoading('createPlayer', true);

            try {
                const playerData = {
                    name,
                    number,
                    position,
                    teamId,
                    leagueId: appData.selectedLeague
                };

                if (appData.editingItem) {
                    playerData.id = appData.editingItem;
                    await apiCall('/players', {
                        method: 'PUT',
                        body: JSON.stringify(playerData)
                    });
                    showToast('Player updated successfully!');
                } else {
                    await apiCall('/players', {
                        method: 'POST',
                        body: JSON.stringify(playerData)
                    });
                    showToast('Player created successfully!');
                }

                await loadLeagueData(appData.selectedLeague);
                closeModal('playerModal');
                
                // Reset form
                document.getElementById('playerName').value = '';
                document.getElementById('playerNumber').value = '';
                document.getElementById('playerPosition').value = '';
                document.getElementById('playerTeam').value = '';
                appData.editingItem = null;
                
            } catch (error) {
                console.error('Save player error:', error);
                showToast(error.message || 'Failed to save player', 'error');
            } finally {
                setLoading('createPlayer', false);
            }
        }

        async function deletePlayer(playerId) {
            if (!confirm('Are you sure you want to delete this player?')) {
                return;
            }

            try {
                await apiCall(`/players?id=${playerId}`, {
                    method: 'DELETE'
                });

                await loadLeagueData(appData.selectedLeague);
                showToast('Player deleted successfully!');
            } catch (error) {
                showToast(error.message || 'Failed to delete player', 'error');
            }
        }

        // Match Management
        async function saveMatch() {
            const homeTeamId = document.getElementById('matchHomeTeam').value;
            const awayTeamId = document.getElementById('matchAwayTeam').value;
            const date = document.getElementById('matchDate').value;
            const time = document.getElementById('matchTime').value;
            const round = parseInt(document.getElementById('matchRound').value);

            console.log('Form values:', { homeTeamId, awayTeamId, date, time, round, leagueId: appData.selectedLeague });

            if (!homeTeamId || !awayTeamId || !date || !time) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            if (homeTeamId === awayTeamId) {
                showToast('Home and away teams must be different', 'error');
                return;
            }

            if (!appData.selectedLeague) {
                showToast('Please select a league first', 'error');
                return;
            }

            setLoading('createMatch', true);

            try {
                const matchData = {
                    homeTeam: homeTeamId,
                    awayTeam: awayTeamId,
                    date: date,
                    time: time,
                    round: round || 1,
                    leagueId: appData.selectedLeague,
                    venue: '',
                    referee: ''
                };

                console.log('Sending match data:', matchData);

                if (appData.editingItem) {
                    matchData.id = appData.editingItem;
                    await apiCall('/matches', {
                        method: 'PUT',
                        body: JSON.stringify(matchData)
                    });
                    showToast('Match updated successfully!');
                } else {
                    const result = await apiCall('/matches', {
                        method: 'POST',
                        body: JSON.stringify(matchData)
                    });
                    console.log('Match creation result:', result);
                    showToast('Match added successfully!');
                }

                await loadLeagueData(appData.selectedLeague);
                closeModal('addMatchModal');
                
                // Reset form
                document.getElementById('matchHomeTeam').value = '';
                document.getElementById('matchAwayTeam').value = '';
                document.getElementById('matchDate').value = '';
                document.getElementById('matchTime').value = '18:00';
                document.getElementById('matchRound').value = '1';
                appData.editingItem = null;
                
            } catch (error) {
                console.error('Save match error:', error);
                showToast(error.message || 'Failed to save match', 'error');
            } finally {
                setLoading('createMatch', false);
            }
        }

        async function deleteMatch(matchId) {
            if (!confirm('Are you sure you want to delete this match?')) {
                return;
            }

            try {
                await apiCall(`/matches?id=${matchId}`, {
                    method: 'DELETE'
                });

                await loadLeagueData(appData.selectedLeague);
                showToast('Match deleted successfully!');
            } catch (error) {
                showToast(error.message || 'Failed to delete match', 'error');
            }
        }

        // Improved Double Round Robin Schedule Generation
        function addTimePeriod() {
            const container = document.getElementById('timePeriodsContainer');
            const newItem = document.createElement('div');
            newItem.className = 'time-period-item';
            newItem.innerHTML = `
                <input type="time" class="time-period-input" value="19:30" style="flex: 1;">
                <button type="button" class="btn btn-small btn-danger" onclick="removeTimePeriod(this)">Remove</button>
            `;
            container.appendChild(newItem);
            
            // Show remove buttons if more than one time period
            const removeButtons = container.querySelectorAll('.btn-danger');
            removeButtons.forEach(btn => btn.style.display = removeButtons.length > 1 ? 'block' : 'none');
        }

        function removeTimePeriod(button) {
            const container = document.getElementById('timePeriodsContainer');
            button.parentElement.remove();
            
            // Hide remove buttons if only one time period left
            const removeButtons = container.querySelectorAll('.btn-danger');
            removeButtons.forEach(btn => btn.style.display = removeButtons.length > 1 ? 'block' : 'none');
        }

        function generateSchedulePreview() {
            if (!appData.selectedLeague || appData.teams.length < 2) {
                showToast('Need at least 2 teams to generate schedule', 'error');
                return;
            }

            const format = document.getElementById('tournamentFormat').value;
            const startDate = new Date(document.getElementById('scheduleStartDate').value);
            const daysBetween = parseInt(document.getElementById('daysBetweenRounds').value);
            
            const timePeriods = Array.from(document.querySelectorAll('.time-period-input'))
                .map(input => input.value)
                .filter(time => time);

            if (timePeriods.length === 0) {
                showToast('Please add at least one match time', 'error');
                return;
            }

            // Generate improved round robin schedule
            const teams = [...appData.teams];
            const schedule = generateImprovedRoundRobinSchedule(teams, format);
            
            // Apply dates and times
            const matches = [];
            let currentDate = new Date(startDate);
            let timeIndex = 0;
            
            schedule.forEach(round => {
                round.matches.forEach(match => {
                    matches.push({
                        homeTeam: match.homeTeam._id,
                        awayTeam: match.awayTeam._id,
                        date: currentDate.toISOString().split('T')[0],
                        time: timePeriods[timeIndex % timePeriods.length],
                        round: round.round,
                        venue: match.homeTeam.stadium || 'TBD'
                    });
                    timeIndex++;
                });
                
                // Move to next round date
                currentDate.setDate(currentDate.getDate() + daysBetween);
            });

            appData.generatedSchedule = matches;
            
            // Show preview
            displaySchedulePreview(schedule, startDate, timePeriods);
            document.getElementById('schedulePreviewContainer').classList.remove('hidden');
            document.getElementById('generateScheduleButton').disabled = false;
        }

        // REPLACE THE EXISTING generateImprovedRoundRobinSchedule FUNCTION WITH THIS CORRECTED VERSION:

        function generateImprovedRoundRobinSchedule(teams, format) {
            console.log('🎲 Generating fully randomized round-robin schedule...');
            
            const teamCount = teams.length;
            const isOdd = teamCount % 2 !== 0;
            let teamsList = [...teams];

            if (isOdd) {
                teamsList.push({ _id: 'BYE', name: 'BYE' });
            }

            const workingTeamCount = teamsList.length;
            console.log(`📊 Schedule parameters:`, {
                originalTeams: teamCount,
                workingTeams: workingTeamCount,
                format: format,
                isOdd: isOdd
            });

            if (format === 'double-round-robin') {
                return generateCorrectDoubleRoundRobin(teamsList, teamCount);
            } else {
                return generateRandomizedSingleRoundRobin(teamsList, teamCount);
            }
        }

        function generateCorrectDoubleRoundRobin(teams, originalTeamCount) {
            console.log('🔄 Generating CORRECTED double round-robin...');
            
            const workingTeamCount = teams.length;
            const roundsPerHalf = workingTeamCount - 1; // This is correct: n-1 rounds per half
            const totalRounds = roundsPerHalf * 2;
            
            console.log(`📈 Round calculation:`, {
                originalTeams: originalTeamCount,
                workingTeams: workingTeamCount,
                roundsPerHalf: roundsPerHalf,
                totalRounds: totalRounds,
                expectedMatches: originalTeamCount * (originalTeamCount - 1) // Each team plays every other team twice
            });

            // Create all possible team pairings (each pair appears twice - once each way)
            const allMatches = [];
            
            for (let i = 0; i < teams.length; i++) {
                for (let j = 0; j < teams.length; j++) {
                    if (i !== j && teams[i]._id !== 'BYE' && teams[j]._id !== 'BYE') {
                        allMatches.push({
                            homeTeam: teams[i],
                            awayTeam: teams[j],
                            scheduled: false,
                            pairId: `${Math.min(i,j)}-${Math.max(i,j)}`, // For tracking pairs
                            isFirstLeg: i < j // Track if this is first or second leg
                        });
                    }
                }
            }
            
            console.log(`📋 Generated ${allMatches.length} total matches for ${originalTeamCount} teams`);
            
            // Shuffle all matches randomly
            for (let i = allMatches.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [allMatches[i], allMatches[j]] = [allMatches[j], allMatches[i]];
            }
            
            const rounds = [];
            let roundNumber = 1;
            const maxMatchesPerRound = Math.floor(workingTeamCount / 2);
            
            // Schedule matches into rounds
            while (allMatches.some(match => !match.scheduled) && roundNumber <= totalRounds) {
                const roundMatches = [];
                const usedTeams = new Set();
                
                // Try to fill this round with maximum possible matches
                for (let i = 0; i < allMatches.length && roundMatches.length < maxMatchesPerRound; i++) {
                    const match = allMatches[i];
                    
                    if (match.scheduled) continue;
                    
                    const homeTeamId = match.homeTeam._id;
                    const awayTeamId = match.awayTeam._id;
                    
                    // Check if both teams are available for this round
                    if (!usedTeams.has(homeTeamId) && !usedTeams.has(awayTeamId)) {
                        roundMatches.push({
                            homeTeam: match.homeTeam,
                            awayTeam: match.awayTeam
                        });
                        
                        usedTeams.add(homeTeamId);
                        usedTeams.add(awayTeamId);
                        match.scheduled = true;
                        
                        console.log(`Round ${roundNumber}: ${match.homeTeam.name} vs ${match.awayTeam.name}`);
                    }
                }
                
                if (roundMatches.length > 0) {
                    // Final shuffle of matches within the round
                    for (let i = roundMatches.length - 1; i > 0; i--) {
                        const j = Math.floor(Math.random() * (i + 1));
                        [roundMatches[i], roundMatches[j]] = [roundMatches[j], roundMatches[i]];
                    }
                    
                    rounds.push({
                        round: roundNumber,
                        matches: roundMatches
                    });
                    
                    console.log(`✅ Round ${roundNumber} completed with ${roundMatches.length} matches`);
                    roundNumber++;
                } else {
                    console.warn(`⚠️ No matches could be scheduled for round ${roundNumber}, breaking`);
                    break;
                }
            }
            
            // Verify scheduling
            const scheduledMatches = rounds.reduce((sum, r) => sum + r.matches.length, 0);
            const expectedMatches = originalTeamCount * (originalTeamCount - 1);
            const unscheduledMatches = allMatches.filter(m => !m.scheduled).length;
            
            console.log(`🏁 Double round-robin scheduling complete:`, {
                roundsGenerated: rounds.length,
                expectedRounds: totalRounds,
                matchesScheduled: scheduledMatches,
                expectedMatches: expectedMatches,
                unscheduledMatches: unscheduledMatches,
                efficiency: `${((scheduledMatches / expectedMatches) * 100).toFixed(1)}%`
            });
            
            if (unscheduledMatches > 0) {
                console.warn(`⚠️ ${unscheduledMatches} matches could not be scheduled`);
            }
            
            return rounds;
        }

        function generateRandomizedSingleRoundRobin(teams, originalTeamCount) {
            console.log('🔄 Generating randomized single round-robin...');
            
            const workingTeamCount = teams.length;
            const totalRounds = workingTeamCount - 1;
            
            console.log(`📈 Single round-robin calculation:`, {
                originalTeams: originalTeamCount,
                workingTeams: workingTeamCount,
                totalRounds: totalRounds,
                expectedMatches: (originalTeamCount * (originalTeamCount - 1)) / 2
            });

            // Generate all unique pairs (each pair appears once)
            const allMatches = [];
            
            for (let i = 0; i < teams.length; i++) {
                for (let j = i + 1; j < teams.length; j++) {
                    if (teams[i]._id !== 'BYE' && teams[j]._id !== 'BYE') {
                        // Randomly decide home/away
                        const isAHome = Math.random() < 0.5;
                        allMatches.push({
                            homeTeam: isAHome ? teams[i] : teams[j],
                            awayTeam: isAHome ? teams[j] : teams[i],
                            scheduled: false
                        });
                    }
                }
            }
            
            // Shuffle all matches
            for (let i = allMatches.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [allMatches[i], allMatches[j]] = [allMatches[j], allMatches[i]];
            }
            
            const rounds = [];
            let roundNumber = 1;
            const maxMatchesPerRound = Math.floor(workingTeamCount / 2);
            
            // Schedule matches into rounds
            while (allMatches.some(match => !match.scheduled)) {
                const roundMatches = [];
                const usedTeams = new Set();
                
                for (let i = 0; i < allMatches.length && roundMatches.length < maxMatchesPerRound; i++) {
                    const match = allMatches[i];
                    
                    if (match.scheduled) continue;
                    
                    const homeTeamId = match.homeTeam._id;
                    const awayTeamId = match.awayTeam._id;
                    
                    if (!usedTeams.has(homeTeamId) && !usedTeams.has(awayTeamId)) {
                        roundMatches.push({
                            homeTeam: match.homeTeam,
                            awayTeam: match.awayTeam
                        });
                        
                        usedTeams.add(homeTeamId);
                        usedTeams.add(awayTeamId);
                        match.scheduled = true;
                    }
                }
                
                if (roundMatches.length > 0) {
                    rounds.push({
                        round: roundNumber,
                        matches: roundMatches
                    });
                    roundNumber++;
                } else {
                    break;
                }
            }
            
            const scheduledMatches = rounds.reduce((sum, r) => sum + r.matches.length, 0);
            const expectedMatches = (originalTeamCount * (originalTeamCount - 1)) / 2;
            
            console.log(`🏁 Single round-robin complete:`, {
                roundsGenerated: rounds.length,
                expectedRounds: totalRounds,
                matchesScheduled: scheduledMatches,
                expectedMatches: expectedMatches
            });
            
            return rounds;
        }

        // ADD THIS HELPER FUNCTION TO TEST THE CALCULATIONS:
        function logScheduleCalculations(teamCount) {
            console.log(`
📚 Round Robin Calculations for ${teamCount} teams:

Single Round Robin:
- Rounds: ${teamCount - 1}
- Matches: ${(teamCount * (teamCount - 1)) / 2}
- Each team plays: ${teamCount - 1} games

Double Round Robin:  
- Rounds: ${(teamCount - 1) * 2}
- Matches: ${teamCount * (teamCount - 1)}
- Each team plays: ${(teamCount - 1) * 2} games
            `);
        }

        // ALSO ADD THIS TO THE displaySchedulePreview FUNCTION:
        function displaySchedulePreview(schedule, startDate, timePeriods) {
            const info = document.getElementById('scheduleInfo');
            const preview = document.getElementById('schedulePreview');
            
            const totalMatches = schedule.reduce((sum, round) => sum + round.matches.length, 0);
            const teamCount = appData.teams.length;
            const format = document.getElementById('tournamentFormat').value;
            
            // Calculate expected values for verification
            const expectedRounds = format === 'double-round-robin' ? (teamCount - 1) * 2 : (teamCount - 1);
            const expectedMatches = format === 'double-round-robin' ? teamCount * (teamCount - 1) : (teamCount * (teamCount - 1)) / 2;
            
            info.innerHTML = `
                <div style="margin-bottom: 10px;">
                    <strong>${schedule.length} rounds</strong> (expected: ${expectedRounds}) • 
                    <strong>${totalMatches} matches</strong> (expected: ${expectedMatches}) • 
                    Starting ${startDate.toDateString()}
                </div>
                <div style="font-size: 12px; color: var(--text-secondary);">
                    Format: ${format} • Teams: ${teamCount} • 
                    ${schedule.length === expectedRounds ? '✅ Correct rounds' : '⚠️ Round count mismatch'} • 
                    ${totalMatches === expectedMatches ? '✅ Correct matches' : '⚠️ Match count mismatch'}
                </div>
            `;
            
            preview.innerHTML = schedule.map(round => `
                <div class="round-group">
                    <div class="round-title">Round ${round.round} (${round.matches.length} matches)</div>
                    ${round.matches.map((match, idx) => `
                        <div class="match-preview">
                            ${match.homeTeam.name} vs ${match.awayTeam.name} - ${timePeriods[idx % timePeriods.length]}
                        </div>
                    `).join('')}
                </div>
            `).join('');
        }

        async function generateAndSaveSchedule() {
            if (!appData.generatedSchedule) {
                showToast('Please generate a preview first', 'error');
                return;
            }

            setLoading('generateSchedule', true);

            try {
                // Use bulk creation for speed! 🚀
                const result = await apiCall('/matches', {
                    method: 'POST',
                    body: JSON.stringify({
                        leagueId: appData.selectedLeague,
                        matches: appData.generatedSchedule
                    })
                });

                await loadLeagueData(appData.selectedLeague);
                closeModal('scheduleModal');
                showSection('matches');
                
                showToast(`⚡ ${result.matchesCreated || appData.generatedSchedule.length} matches created successfully!`);
                
                appData.generatedSchedule = null;
                
                // Reset the preview
                document.getElementById('schedulePreviewContainer').classList.add('hidden');
                document.getElementById('generateScheduleButton').disabled = true;
                
            } catch (error) {
                console.error('Generate schedule error:', error);
                showToast(error.message || 'Failed to save schedule', 'error');
            } finally {
                setLoading('generateSchedule', false);
            }
        }

        // BULK MATCH EDITOR FUNCTIONS
        function openBulkMatchEditor() {
            if (!appData.selectedLeague) {
                showToast('Please select a league first', 'error');
                return;
            }
            
            if (appData.matches.length === 0) {
                showToast('No matches available to edit', 'error');
                return;
            }
            
            bulkMatchData.allMatches = [...appData.matches];
            bulkMatchData.selectedMatches.clear();
            bulkMatchData.pendingChanges = [];
            
            populateBulkFilters();
            filterBulkMatches();
            
            document.getElementById('bulkMatchModal').classList.add('active');
        }

        function populateBulkFilters() {
            const rounds = [...new Set(appData.matches.map(m => m.round))].sort((a, b) => a - b);
            const dates = [...new Set(appData.matches.map(m => m.date))].sort();
            const times = [...new Set(appData.matches.map(m => m.time))].sort();
            
            // Populate round filter
            const roundFilter = document.getElementById('bulkRoundFilter');
            roundFilter.innerHTML = '<option value="all">All Rounds</option>';
            rounds.forEach(round => {
                roundFilter.innerHTML += `<option value="${round}">Round ${round}</option>`;
            });
            
            // Populate date filter
            const dateFilter = document.getElementById('bulkDateFilter');
            dateFilter.innerHTML = '<option value="all">All Dates</option>';
            dates.forEach(date => {
                const dateObj = new Date(date);
                const formatted = dateObj.toLocaleDateString();
                dateFilter.innerHTML += `<option value="${date}">${formatted}</option>`;
            });
            
            // Populate time filter
            const timeFilter = document.getElementById('bulkTimeFilter');
            timeFilter.innerHTML = '<option value="all">All Times</option>';
            times.forEach(time => {
                timeFilter.innerHTML += `<option value="${time}">${time}</option>`;
            });
        }

        function filterBulkMatches() {
            const statusFilter = document.getElementById('bulkStatusFilter').value;
            const roundFilter = document.getElementById('bulkRoundFilter').value;
            const dateFilter = document.getElementById('bulkDateFilter').value;
            const timeFilter = document.getElementById('bulkTimeFilter').value;
            
            bulkMatchData.filteredMatches = bulkMatchData.allMatches.filter(match => {
                if (statusFilter !== 'all' && match.status !== statusFilter) return false;
                if (roundFilter !== 'all' && match.round.toString() !== roundFilter) return false;
                if (dateFilter !== 'all' && match.date !== dateFilter) return false;
                if (timeFilter !== 'all' && match.time !== timeFilter) return false;
                return true;
            });
            
            renderBulkMatchesList();
        }

        function renderBulkMatchesList() {
            const container = document.getElementById('bulkMatchesList');
            
            if (bulkMatchData.filteredMatches.length === 0) {
                container.innerHTML = '<p style="color: var(--text-secondary); text-align: center;">No matches match the current filters</p>';
                return;
            }
            
            container.innerHTML = bulkMatchData.filteredMatches.map(match => {
                const isSelected = bulkMatchData.selectedMatches.has(match._id);
                const homeTeam = match.homeTeam?.name || 'TBD';
                const awayTeam = match.awayTeam?.name || 'TBD';
                
                return `
                    <div style="display: flex; align-items: center; padding: 12px; background: var(--bg-card); margin-bottom: 8px; border-radius: 8px; border: 2px solid ${isSelected ? 'var(--primary)' : 'var(--border)'};">
                        <label style="display: flex; align-items: center; cursor: pointer; flex: 1;">
                            <input type="checkbox" 
                                   ${isSelected ? 'checked' : ''} 
                                   onchange="toggleMatchSelection('${match._id}')"
                                   style="margin-right: 15px; transform: scale(1.2);">
                            <div style="flex: 1;">
                                <div style="font-weight: bold; margin-bottom: 4px;">
                                    ${homeTeam} vs ${awayTeam}
                                </div>
                                <div style="color: var(--text-secondary); font-size: 12px;">
                                    📅 ${match.date} • 🕐 ${match.time} • 🔄 Round ${match.round} • 📍 ${match.venue || 'TBD'}
                                </div>
                                <div style="color: var(--text-secondary); font-size: 11px;">
                                    Status: <span style="color: var(--${getStatusColor(match.status)});">${match.status}</span>
                                </div>
                            </div>
                        </label>
                    </div>
                `;
            }).join('');
            
            updateSelectedCount();
        }

        function toggleMatchSelection(matchId) {
            if (bulkMatchData.selectedMatches.has(matchId)) {
                bulkMatchData.selectedMatches.delete(matchId);
            } else {
                bulkMatchData.selectedMatches.add(matchId);
            }
            renderBulkMatchesList();
        }

        function selectAllMatches() {
            bulkMatchData.filteredMatches.forEach(match => {
                bulkMatchData.selectedMatches.add(match._id);
            });
            renderBulkMatchesList();
        }

        function selectNoneMatches() {
            bulkMatchData.selectedMatches.clear();
            renderBulkMatchesList();
        }

        function selectSameDateMatches() {
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select at least one match first', 'error');
                return;
            }
            
            const firstSelected = [...bulkMatchData.selectedMatches][0];
            const referenceMatch = bulkMatchData.allMatches.find(m => m._id === firstSelected);
            const targetDate = referenceMatch.date;
            
            bulkMatchData.filteredMatches.forEach(match => {
                if (match.date === targetDate) {
                    bulkMatchData.selectedMatches.add(match._id);
                }
            });
            renderBulkMatchesList();
        }

        function selectSameTimeMatches() {
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select at least one match first', 'error');
                return;
            }
            
            const firstSelected = [...bulkMatchData.selectedMatches][0];
            const referenceMatch = bulkMatchData.allMatches.find(m => m._id === firstSelected);
            const targetTime = referenceMatch.time;
            
            bulkMatchData.filteredMatches.forEach(match => {
                if (match.time === targetTime) {
                    bulkMatchData.selectedMatches.add(match._id);
                }
            });
            renderBulkMatchesList();
        }

        function selectSameRoundMatches() {
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select at least one match first', 'error');
                return;
            }
            
            const firstSelected = [...bulkMatchData.selectedMatches][0];
            const referenceMatch = bulkMatchData.allMatches.find(m => m._id === firstSelected);
            const targetRound = referenceMatch.round;
            
            bulkMatchData.filteredMatches.forEach(match => {
                if (match.round === targetRound) {
                    bulkMatchData.selectedMatches.add(match._id);
                }
            });
            renderBulkMatchesList();
        }

        function bulkSetDate() {
            const newDate = document.getElementById('bulkNewDate').value;
            if (!newDate) {
                showToast('Please select a date', 'error');
                return;
            }
            
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select matches to edit', 'error');
                return;
            }
            
            bulkMatchData.selectedMatches.forEach(matchId => {
                addPendingChange(matchId, 'date', newDate);
            });
            
            showToast(`Date set for ${bulkMatchData.selectedMatches.size} matches`, 'success');
        }

        function bulkShiftDates() {
            const shiftDays = parseInt(document.getElementById('bulkShiftDays').value) || 0;
            if (shiftDays === 0) {
                showToast('Please enter number of days to shift', 'error');
                return;
            }
            
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select matches to edit', 'error');
                return;
            }
            
            bulkMatchData.selectedMatches.forEach(matchId => {
                const match = bulkMatchData.allMatches.find(m => m._id === matchId);
                const currentDate = new Date(match.date);
                currentDate.setDate(currentDate.getDate() + shiftDays);
                const newDate = currentDate.toISOString().split('T')[0];
                addPendingChange(matchId, 'date', newDate);
            });
            
            showToast(`Dates shifted by ${shiftDays} days for ${bulkMatchData.selectedMatches.size} matches`, 'success');
        }

        function bulkSetTime() {
            const newTime = document.getElementById('bulkNewTime').value;
            if (!newTime) {
                showToast('Please select a time', 'error');
                return;
            }
            
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select matches to edit', 'error');
                return;
            }
            
            bulkMatchData.selectedMatches.forEach(matchId => {
                addPendingChange(matchId, 'time', newTime);
            });
            
            showToast(`Time set for ${bulkMatchData.selectedMatches.size} matches`, 'success');
        }

        function bulkShiftTimes() {
            const shiftHours = parseInt(document.getElementById('bulkShiftHours').value) || 0;
            const shiftMinutes = parseInt(document.getElementById('bulkShiftMinutes').value) || 0;
            
            if (shiftHours === 0 && shiftMinutes === 0) {
                showToast('Please enter hours or minutes to shift', 'error');
                return;
            }
            
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select matches to edit', 'error');
                return;
            }
            
            bulkMatchData.selectedMatches.forEach(matchId => {
                const match = bulkMatchData.allMatches.find(m => m._id === matchId);
                const [hours, minutes] = match.time.split(':').map(Number);
                
                let newHours = hours + shiftHours;
                let newMinutes = minutes + shiftMinutes;
                
                // Handle minute overflow
                if (newMinutes >= 60) {
                    newHours += Math.floor(newMinutes / 60);
                    newMinutes = newMinutes % 60;
                } else if (newMinutes < 0) {
                    newHours -= Math.ceil(Math.abs(newMinutes) / 60);
                    newMinutes = 60 + (newMinutes % 60);
                }
                
                // Handle hour overflow
                if (newHours >= 24) {
                    newHours = newHours % 24;
                } else if (newHours < 0) {
                    newHours = 24 + (newHours % 24);
                }
                
                const newTime = `${String(newHours).padStart(2, '0')}:${String(newMinutes).padStart(2, '0')}`;
                addPendingChange(matchId, 'time', newTime);
            });
            
            showToast(`Times shifted for ${bulkMatchData.selectedMatches.size} matches`, 'success');
        }

        function bulkSetVenue() {
            const newVenue = document.getElementById('bulkNewVenue').value.trim();
            if (!newVenue) {
                showToast('Please enter a venue', 'error');
                return;
            }
            
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select matches to edit', 'error');
                return;
            }
            
            bulkMatchData.selectedMatches.forEach(matchId => {
                addPendingChange(matchId, 'venue', newVenue);
            });
            
            showToast(`Venue set for ${bulkMatchData.selectedMatches.size} matches`, 'success');
        }

        function bulkSetRound() {
            const newRound = parseInt(document.getElementById('bulkNewRound').value);
            if (!newRound || newRound < 1) {
                showToast('Please enter a valid round number', 'error');
                return;
            }
            
            if (bulkMatchData.selectedMatches.size === 0) {
                showToast('Please select matches to edit', 'error');
                return;
            }
            
            bulkMatchData.selectedMatches.forEach(matchId => {
                addPendingChange(matchId, 'round', newRound);
            });
            
            showToast(`Round set for ${bulkMatchData.selectedMatches.size} matches`, 'success');
        }

        function addPendingChange(matchId, field, value) {
            // Remove existing change for this match and field
            bulkMatchData.pendingChanges = bulkMatchData.pendingChanges.filter(
                change => !(change.matchId === matchId && change.field === field)
            );
            
            // Add new change
            bulkMatchData.pendingChanges.push({ matchId, field, value });
        }

        function updateSelectedCount() {
            document.getElementById('selectedMatchCount').textContent = 
                `(${bulkMatchData.selectedMatches.size} selected)`;
        }

        function getStatusColor(status) {
            switch(status) {
                case 'live': return 'live';
                case 'finished': return 'success';
                case 'scheduled': return 'primary';
                default: return 'secondary';
            }
        }

        async function applyBulkChanges() {
            if (bulkMatchData.pendingChanges.length === 0) {
                showToast('No changes to apply', 'error');
                return;
            }
            
            if (!confirm(`Apply ${bulkMatchData.pendingChanges.length} changes to ${bulkMatchData.selectedMatches.size} matches?`)) {
                return;
            }
            
            setLoading('applyBulk', true);
            
            try {
                // Group changes by match
                const changesByMatch = {};
                bulkMatchData.pendingChanges.forEach(change => {
                    if (!changesByMatch[change.matchId]) {
                        changesByMatch[change.matchId] = { id: change.matchId };
                    }
                    changesByMatch[change.matchId][change.field] = change.value;
                });
                
                // Apply changes to each match
                let successCount = 0;
                let errorCount = 0;
                
                for (const matchId in changesByMatch) {
                    try {
                        await apiCall('/matches', {
                            method: 'PUT',
                            body: JSON.stringify(changesByMatch[matchId])
                        });
                        successCount++;
                    } catch (error) {
                        console.error(`Failed to update match ${matchId}:`, error);
                        errorCount++;
                    }
                }
                
                if (successCount > 0) {
                    showToast(`✅ Successfully updated ${successCount} matches`, 'success');
                    await loadLeagueData(appData.selectedLeague);
                }
                
                if (errorCount > 0) {
                    showToast(`⚠️ Failed to update ${errorCount} matches`, 'error');
                }
                
                closeModal('bulkMatchModal');
                
            } catch (error) {
                console.error('Bulk update error:', error);
                showToast('Failed to apply bulk changes', 'error');
            } finally {
                setLoading('applyBulk', false);
            }
        }

        // Admin Management Functions
        async function loadAdmins() {
            try {
                const admins = await apiCall('/admin');
                appData.admins = admins;
                renderAdmins();
            } catch (error) {
                console.error('Failed to load admins:', error);
                showToast('Failed to load admins', 'error');
            }
        }

        async function changePassword() {
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPasswordChange').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            if (!currentPassword || !newPassword || !confirmPassword) {
                showToast('Please fill in all fields', 'error');
                return;
            }

            if (newPassword !== confirmPassword) {
                showToast('New passwords do not match', 'error');
                return;
            }

            if (newPassword.length < 6) {
                showToast('New password must be at least 6 characters', 'error');
                return;
            }

            setLoading('changePassword', true);

            try {
                await apiCall('/admin/change-password', {
                    method: 'PUT',
                    body: JSON.stringify({
                        currentPassword,
                        newPassword,
                        username: appData.currentUser.username
                    })
                });

                closeModal('changePasswordModal');
                showToast('Password changed successfully!');
                
                // Reset form
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPasswordChange').value = '';
                document.getElementById('confirmPassword').value = '';
                
            } catch (error) {
                showToast(error.message || 'Failed to change password', 'error');
            } finally {
                setLoading('changePassword', false);
            }
        }

        async function saveAdmin() {
            const username = document.getElementById('newUsername').value.trim();
            const password = document.getElementById('newPassword').value;
            const role = document.getElementById('newUserRole').value;

            if (!username || !password || !role) {
                showToast('Please fill in all fields', 'error');
                return;
            }

            setLoading('createUser', true);

            try {
                await apiCall('/admin', {
                    method: 'POST',
                    body: JSON.stringify({ username, password, role })
                });

                await loadAdmins();
                closeModal('userModal');
                showToast('Admin created successfully!');
                
                // Reset form
                document.getElementById('newUsername').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('newUserRole').value = '';
            } catch (error) {
                showToast(error.message || 'Failed to create admin', 'error');
            } finally {
                setLoading('createUser', false);
            }
        }

        async function deleteAdmin(username) {
            if (!confirm('Are you sure you want to delete this admin?')) {
                return;
            }

            try {
                await apiCall(`/admin?username=${username}`, {
                    method: 'DELETE'
                });

                await loadAdmins();
                showToast('Admin deleted successfully!');
            } catch (error) {
                showToast(error.message || 'Failed to delete admin', 'error');
            }
        }

        // FIXED LIVE MATCH MANAGEMENT FUNCTIONS
        async function startMatch(matchId) {
            try {
                console.log('Starting match:', matchId);
                
                const response = await fetch(`${API_BASE}/matches/live`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${appData.authToken}`
                    },
                    body: JSON.stringify({
                        action: 'start_match',
                        matchId: matchId,
                        data: {}
                    })
                });

                const result = await response.json();
                
                if (response.ok) {
                    console.log('Match started successfully:', result);
                    document.getElementById('matchStatus').textContent = 'live';
                    document.getElementById('matchStatus').style.color = 'var(--live)';
                    showToast('Match started! 🔴', 'success');
                    
                    // Start the automatic timer
                    const currentTime = parseInt(document.getElementById('currentMinute').value) || 0;
                    initializeTimer(currentTime);
                    
                    // Refresh data and interface
                    await loadLeagueData(appData.selectedLeague);
                    manageLiveMatch(matchId);
                } else {
                    throw new Error(result.error || 'Failed to start match');
                }
                
            } catch (error) {
                console.error('Start match error:', error);
                showToast(error.message || 'Failed to start match', 'error');
            }
        }

        async function setHalftime(matchId) {
            try {
                console.log('Setting halftime for match:', matchId);
                
                const response = await fetch(`${API_BASE}/matches/live`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${appData.authToken}`
                    },
                    body: JSON.stringify({
                        action: 'halftime',
                        matchId: matchId,
                        data: {}
                    })
                });

                const result = await response.json();
                
                if (response.ok) {
                    console.log('Halftime set successfully:', result);
                    
                    // Pause the timer during halftime
                    if (typeof matchTimer !== 'undefined' && matchTimer) {
                        clearInterval(matchTimer);
                        isMatchPaused = true;
                    }
                    
                    document.getElementById('matchStatus').textContent = 'halftime';
                    document.getElementById('matchStatus').style.color = 'var(--warning)';
                    showToast('Half time! ⏸️', 'warning');
                    manageLiveMatch(matchId);
                } else {
                    throw new Error(result.error || 'Failed to set halftime');
                }
                
            } catch (error) {
                console.error('Set halftime error:', error);
                showToast(error.message || 'Failed to set halftime', 'error');
            }
        }

        async function resumeMatch(matchId) {
            try {
                console.log('Resuming match:', matchId);
                
                const response = await fetch(`${API_BASE}/matches/live`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${appData.authToken}`
                    },
                    body: JSON.stringify({
                        action: 'second_half',
                        matchId: matchId,
                        data: {}
                    })
                });

                const result = await response.json();
                
                if (response.ok) {
                    console.log('Match resumed successfully:', result);
                    
                    document.getElementById('matchStatus').textContent = 'live';
                    document.getElementById('matchStatus').style.color = 'var(--live)';
                    showToast('Match resumed! ▶️', 'success');
                    
                    // Resume the timer
                    if (typeof isMatchPaused !== 'undefined' && isMatchPaused) {
                        const currentTime = parseInt(document.getElementById('currentMinute').value) || 45;
                        initializeTimer(currentTime);
                        isMatchPaused = false;
                    }
                    
                    manageLiveMatch(matchId);
                } else {
                    throw new Error(result.error || 'Failed to resume match');
                }
                
            } catch (error) {
                console.error('Resume match error:', error);
                showToast(error.message || 'Failed to resume match', 'error');
            }
        }

        async function endMatch(matchId) {
            if (!confirm('Are you sure you want to end this match?')) {
                return;
            }
            
            try {
                console.log('Ending match:', matchId);
                
                // Stop any running timer
                if (typeof matchTimer !== 'undefined' && matchTimer) {
                    clearInterval(matchTimer);
                    matchTimer = null;
                }
                
                const response = await fetch(`${API_BASE}/matches/live`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${appData.authToken}`
                    },
                    body: JSON.stringify({
                        action: 'end_match',
                        matchId: matchId,
                        data: {}
                    })
                });

                const result = await response.json();
                
                if (response.ok) {
                    console.log('Match ended successfully:', result);
                    
                    document.getElementById('matchStatus').textContent = 'finished';
                    document.getElementById('matchStatus').style.color = 'var(--success)';
                    showToast('Match finished! ⏹️', 'success');
                    
                    // Refresh data and go back to selection
                    await loadLeagueData(appData.selectedLeague);
                    closeLiveMatch();
                } else {
                    throw new Error(result.error || 'Failed to end match');
                }
                
            } catch (error) {
                console.error('End match error:', error);
                showToast(error.message || 'Failed to end match', 'error');
            }
        }

        async function updateMatchTime(matchId) {
            try {
                const minute = parseInt(document.getElementById('currentMinute').value) || 0;
                console.log('Updating match time to:', minute);
                
                const response = await fetch(`${API_BASE}/matches/live`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${appData.authToken}`
                    },
                    body: JSON.stringify({
                        action: 'update_time',
                        matchId: matchId,
                        data: {
                            minute: minute,
                            period: minute <= 45 ? 'first_half' : 'second_half'
                        }
                    })
                });

                const result = await response.json();
                
                if (response.ok) {
                    console.log('Match time updated successfully:', result);
                    document.getElementById('matchTime').textContent = `${minute}'`;
                    showToast(`Time updated to ${minute}'`, 'success');
                } else {
                    throw new Error(result.error || 'Failed to update time');
                }
                
            } catch (error) {
                console.error('Update time error:', error);
                showToast(error.message || 'Failed to update time', 'error');
            }
        }

        function initializeTimer(startMinute = 0) {
            // Clear any existing timer
            if (matchTimer) {
                clearInterval(matchTimer);
            }
            
            let currentMinute = startMinute;
            isMatchPaused = false;
            
            matchTimer = setInterval(() => {
                if (!isMatchPaused) {
                    currentMinute++;
                    document.getElementById('currentMinute').value = currentMinute;
                    document.getElementById('matchTime').textContent = `${currentMinute}'`;
                    
                    // Auto pause at 45 minutes for halftime suggestion
                    if (currentMinute === 45) {
                        showToast('⏰ 45 minutes reached - Consider halftime!', 'warning');
                    }
                    
                    // Auto pause at 90 minutes for full time suggestion
                    if (currentMinute === 90) {
                        showToast('⏰ 90 minutes reached - Consider ending match!', 'warning');
                    }
                }
            }, 60000); // Update every minute (60 seconds)
            
            console.log('Timer initialized at minute:', startMinute);
        }

        async function updateScore(matchId) {
            try {
                const homeScore = parseInt(document.getElementById('manualHomeScore').value) || 0;
                const awayScore = parseInt(document.getElementById('manualAwayScore').value) || 0;
                
                console.log('Updating score:', { homeScore, awayScore });
                
                const response = await fetch(`${API_BASE}/matches/live`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${appData.authToken}`
                    },
                    body: JSON.stringify({
                        action: 'update_score',
                        matchId: matchId,
                        data: {
                            homeScore: homeScore,
                            awayScore: awayScore
                        }
                    })
                });

                const result = await response.json();
                
                if (response.ok) {
                    console.log('Score updated successfully:', result);
                    
                    // Update UI
                    document.getElementById('liveHomeScore').textContent = homeScore;
                    document.getElementById('liveAwayScore').textContent = awayScore;
                    
                    showToast('Score updated!', 'success');
                } else {
                    throw new Error(result.error || 'Failed to update score');
                }
                
            } catch (error) {
                console.error('Update score error:', error);
                showToast(error.message || 'Failed to update score', 'error');
            }
        }

        async function addGoalWithPlayer(matchId, teamId, side) {
            const scorerSelect = document.getElementById(side + 'GoalScorer');
            const assistSelect = document.getElementById(side + 'Assist');
            
            const scorerId = scorerSelect.value;
            const assistId = assistSelect.value;
            const minute = parseInt(document.getElementById('currentMinute').value) || 0;
            
            if (!scorerId) {
                showToast('Please select a goal scorer', 'error');
                return;
            }
            
            try {
                const match = appData.matches.find(m => m._id === matchId);
                const newScore = {
                    home: match.score?.home || 0,
                    away: match.score?.away || 0
                };
                
                if (side === 'home') {
                    newScore.home++;
                } else {
                    newScore.away++;
                }
                
                const scorer = appData.players.find(p => p._id === scorerId);
                const assister = assistId ? appData.players.find(p => p._id === assistId) : null;
                
                // Create match event
                const event = {
                    type: 'goal',
                    minute: minute,
                    player: scorerId,
                    team: teamId,
                    description: `Goal by #${scorer.number} ${scorer.name}${assister ? ` (Assist: #${assister.number} ${assister.name})` : ''}`,
                    timestamp: new Date().toISOString()
                };
                
                // Update match with new score and event
                await apiCall('/matches', {
                    method: 'PUT',
                    body: JSON.stringify({
                        id: matchId,
                        score: newScore,
                        events: { action: 'add', event: event }
                    })
                });
                
                // Update player statistics
                await apiCall('/players', {
                    method: 'PUT',
                    body: JSON.stringify({
                        id: scorerId,
                        stats: {
                            goals: (scorer.stats?.goals || 0) + 1,
                            appearances: Math.max((scorer.stats?.appearances || 0), 1)
                        }
                    })
                });
                
                // Update assist statistics
                if (assistId && assister) {
                    await apiCall('/players', {
                        method: 'PUT',
                        body: JSON.stringify({
                            id: assistId,
                            stats: {
                                assists: (assister.stats?.assists || 0) + 1,
                                appearances: Math.max((assister.stats?.appearances || 0), 1)
                            }
                        })
                    });
                }
                
                // Update UI
                document.getElementById('liveHomeScore').textContent = newScore.home;
                document.getElementById('liveAwayScore').textContent = newScore.away;
                document.getElementById('manualHomeScore').value = newScore.home;
                document.getElementById('manualAwayScore').value = newScore.away;
                
                // Reset selectors
                scorerSelect.value = '';
                assistSelect.value = '';
                
                // Add event to events list
                const eventsContainer = document.getElementById('matchEvents');
                const eventDiv = document.createElement('div');
                eventDiv.style.cssText = 'padding: 8px; margin-bottom: 5px; background: var(--bg-card); border-radius: 5px; font-size: 14px;';
                eventDiv.innerHTML = `<strong>${minute}'</strong> - ${event.description}`;
                eventsContainer.insertBefore(eventDiv, eventsContainer.firstChild);
                
                showToast(`⚽ Goal scored by #${scorer.number} ${scorer.name}!`, 'success');
                
                // Refresh data
                await loadLeagueData(appData.selectedLeague);
                
            } catch (error) {
                console.error('Add goal error:', error);
                showToast('Failed to add goal', 'error');
            }
        }

        // Utility Functions
        function fileToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
        }

        function setLoading(buttonId, isLoading) {
            const textElement = document.getElementById(`${buttonId}Text`);
            const spinnerElement = document.getElementById(`${buttonId}Spinner`);
            const buttonElement = document.getElementById(`${buttonId}Button`);
            
            if (isLoading) {
                textElement.classList.add('hidden');
                spinnerElement.classList.remove('hidden');
                buttonElement.disabled = true;
            } else {
                textElement.classList.remove('hidden');
                spinnerElement.classList.add('hidden');
                buttonElement.disabled = false;
            }
        }

        // League change handler
        async function onLeagueChange() {
            if (appData.selectedLeague) {
                await loadLeagueData(appData.selectedLeague);
                showLeagueSpecificContent();
            } else {
                hideLeagueSpecificContent();
            }
            
            renderLeagues();
        }

        function showLeagueSpecificContent() {
            document.getElementById('addTeamBtn').style.display = 'inline-block';
            document.getElementById('addPlayerBtn').style.display = 'inline-block';
            document.getElementById('generateScheduleBtn').style.display = 'inline-block';
            document.getElementById('addMatchBtn').style.display = 'inline-block';
            document.getElementById('bulkEditBtn').style.display = 'inline-block';
            
            document.getElementById('noLeagueSelectedTeams').classList.add('hidden');
            document.getElementById('noLeagueSelectedPlayers').classList.add('hidden');
            document.getElementById('noLeagueSelectedMatches').classList.add('hidden');
            document.getElementById('noLeagueSelectedLive').classList.add('hidden');
        }

        function hideLeagueSpecificContent() {
            document.getElementById('addTeamBtn').style.display = 'none';
            document.getElementById('addPlayerBtn').style.display = 'none';
            document.getElementById('generateScheduleBtn').style.display = 'none';
            document.getElementById('addMatchBtn').style.display = 'none';
            document.getElementById('bulkEditBtn').style.display = 'none';
            
            document.getElementById('noLeagueSelectedTeams').classList.remove('hidden');
            document.getElementById('noLeagueSelectedPlayers').classList.remove('hidden');
            document.getElementById('noLeagueSelectedMatches').classList.remove('hidden');
            document.getElementById('noLeagueSelectedLive').classList.remove('hidden');
            
            appData.teams = [];
            appData.players = [];
            appData.matches = [];
            appData.liveMatches = [];
            
            renderTeams();
            renderPlayers();
            renderMatches();
            renderLiveMatches();
        }

        // Load league data
        async function loadLeagueData(leagueId) {
            try {
                const teams = await apiCall(`/teams?leagueId=${leagueId}`);
                appData.teams = teams;
                
                const players = await apiCall(`/players?leagueId=${leagueId}`);
                appData.players = players;
                
                const matches = await apiCall(`/matches?leagueId=${leagueId}`);
                appData.matches = matches;
                
                try {
                    const liveMatches = await apiCall(`/matches/live?leagueId=${leagueId}`);
                    appData.liveMatches = liveMatches || [];
                } catch (error) {
                    appData.liveMatches = [];
                }
                
                renderTeams();
                renderPlayers();
                renderMatches();
                renderLiveMatches();
                updateOverviewStats();
                
            } catch (error) {
                console.error('Failed to load league data:', error);
                showToast('Failed to load league data', 'error');
            }
        }

        // Render Functions
        function updateLeagueSelector() {
            const selector = document.getElementById('leagueSelect');
            selector.innerHTML = '<option value="">Select a League</option>';
            
            appData.leagues.forEach(league => {
                const option = document.createElement('option');
                option.value = league._id;
                option.textContent = league.name;
                if (league._id === appData.selectedLeague) {
                    option.selected = true;
                }
                selector.appendChild(option);
            });
        }

        function renderLeagues() {
            const container = document.getElementById('leaguesList');
            
            if (appData.leagues.length === 0) {
                container.innerHTML = '<p style="color: var(--text-secondary)">No leagues created yet</p>';
                return;
            }
            
            container.innerHTML = appData.leagues.map(league => `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: var(--bg-dark); margin-bottom: 10px; border-radius: 8px; ${league._id === appData.selectedLeague ? 'border: 2px solid var(--primary);' : 'border: 2px solid var(--border);'}">
                    <div style="display: flex; align-items: center; gap: 15px;">
                        <div style="width: 40px; height: 40px; background: var(--primary); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">
                            ${league.logo ? `<img src="${league.logo}" style="width:100%;height:100%;object-fit:contain;border-radius:8px;">` : league.name[0]}
                        </div>
                        <div>
                            <div style="font-weight: bold;">${league.name}</div>
                            <div style="color: var(--text-secondary); font-size: 12px;">${league.teamsCount || 0} teams • ${league.matchesCount || 0} matches</div>
                        </div>
                    </div>
                    <div style="display: flex; gap: 10px;">
                        <button class="btn btn-small ${league._id === appData.selectedLeague ? 'btn-success' : 'btn-secondary'}" onclick="selectLeague('${league._id}')">
                            ${league._id === appData.selectedLeague ? 'Selected' : 'Select'}
                        </button>
                        <button class="btn btn-small btn-warning" onclick="editLeague('${league._id}')">Edit</button>
                        <button class="btn btn-small btn-danger" onclick="deleteLeague('${league._id}')">Delete</button>
                    </div>
                </div>
            `).join('');
        }

        function renderTeams() {
            const container = document.getElementById('teamsList');
            
            if (appData.teams.length > 0) {
                container.innerHTML = appData.teams.map(team => `
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: var(--bg-dark); margin-bottom: 10px; border-radius: 8px;">
                        <div style="display: flex; align-items: center; gap: 15px;">
                            <div style="width: 40px; height: 40px; background: var(--primary); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">
                                ${team.logo ? `<img src="${team.logo}" style="width:100%;height:100%;object-fit:contain;border-radius:8px;">` : team.name[0]}
                            </div>
                            <div>
                                <div style="font-weight: bold;">${team.name}</div>
                                <div style="color: var(--text-secondary); font-size: 12px;">${appData.players.filter(p => p.team._id === team._id).length} players</div>
                            </div>
                        </div>
                        <div style="display: flex; gap: 10px;">
                            <button class="btn btn-small btn-warning" onclick="editTeam('${team._id}')">Edit</button>
                            <button class="btn btn-small btn-danger" onclick="deleteTeam('${team._id}')">Delete</button>
                        </div>
                    </div>
                `).join('');
            } else {
                container.innerHTML = '<p style="color: var(--text-secondary)">No teams added yet</p>';
            }
        }

        function renderPlayers() {
            const container = document.getElementById('playersList');
            
            if (appData.players.length > 0) {
                container.innerHTML = appData.players.map(player => {
                    const team = appData.teams.find(t => t._id === player.team._id) || player.team;
                    return `
                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: var(--bg-dark); margin-bottom: 10px; border-radius: 8px;">
                            <div style="display: flex; align-items: center; gap: 15px;">
                                <div style="width: 40px; height: 40px; background: var(--primary); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">
                                    ${player.number}
                                </div>
                                <div>
                                    <div style="font-weight: bold;">${player.name}</div>
                                    <div style="color: var(--text-secondary); font-size: 12px;">${player.position} • ${team?.name || 'Unknown Team'}</div>
                                </div>
                            </div>
                            <div style="display: flex; gap: 10px;">
                                <button class="btn btn-small btn-warning" onclick="editPlayer('${player._id}')">Edit</button>
                                <button class="btn btn-small btn-danger" onclick="deletePlayer('${player._id}')">Delete</button>
                            </div>
                        </div>
                    `;
                }).join('');
            } else {
                container.innerHTML = '<p style="color: var(--text-secondary)">No players added yet</p>';
            }
        }

        function renderMatches() {
            const container = document.getElementById('matchesList');
            
            if (appData.matches.length > 0) {
                // Add bulk edit helper at the top
                const bulkHelper = `
                    <div style="background: var(--bg-dark); padding: 15px; border-radius: 8px; margin-bottom: 15px; border: 2px dashed var(--border);">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="color: var(--primary); margin-bottom: 5px;">💡 Quick Edit Tip</h4>
                                <p style="color: var(--text-secondary); font-size: 12px; margin: 0;">
                                    Need to change dates/times for multiple matches? Use the <strong>Bulk Edit</strong> button above!
                                </p>
                            </div>
                            <button class="btn btn-small btn-warning" onclick="openBulkMatchEditor()">
                                📝 Try Bulk Edit
                            </button>
                        </div>
                    </div>
                `;
                
                const matchesHtml = appData.matches.map(match => `
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: var(--bg-dark); margin-bottom: 10px; border-radius: 8px; position: relative;">
                        <div style="flex: 1;">
                            <div style="font-weight: bold; margin-bottom: 5px;">
                                ${match.homeTeam?.name || 'TBD'} vs ${match.awayTeam?.name || 'TBD'}
                            </div>
                            <div style="color: var(--text-secondary); font-size: 12px;">
                                📅 ${match.date} • 🕐 ${match.time} • 🔄 Round ${match.round} • 📍 ${match.venue || 'TBD'}
                            </div>
                            ${match.status === 'finished' ? 
                                `<div style="color: var(--success); font-size: 12px; margin-top: 2px;">
                                    ⚽ Final Score: ${match.score?.home || 0} - ${match.score?.away || 0}
                                </div>` : ''
                            }
                        </div>
                        <div style="display: flex; gap: 10px; align-items: center;">
                            <span style="padding: 4px 8px; background: var(--${match.status === 'live' ? 'live' : match.status === 'finished' ? 'success' : 'secondary'}); color: white; border-radius: 4px; font-size: 12px;">
                                ${match.status}${match.status === 'live' ? ' 🔴' : ''}
                            </span>
                            <button class="btn btn-small btn-warning" onclick="editMatch('${match._id}')" title="Quick Edit">✏️</button>
                            <button class="btn btn-small btn-danger" onclick="deleteMatch('${match._id}')" title="Delete">🗑️</button>
                        </div>
                    </div>
                `).join('');
                
                container.innerHTML = bulkHelper + matchesHtml;
            } else {
                container.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                        <h3 style="margin-bottom: 15px;">📅 No Matches Scheduled</h3>
                        <p style="margin-bottom: 20px;">Get started by generating a full season schedule or adding individual matches.</p>
                        <div style="display: flex; gap: 10px; justify-content: center;">
                            <button class="btn" onclick="openScheduleModal()">Generate Schedule</button>
                            <button class="btn btn-secondary" onclick="openAddMatchModal()">Add Single Match</button>
                        </div>
                    </div>
                `;
            }
        }

        function renderLiveMatches() {
            const container = document.getElementById('matchSelectionList');
            
            if (appData.matches.length > 0) {
                container.innerHTML = `
                    <h4 style="margin-bottom: 15px; color: var(--primary)">Select Match to Manage Live</h4>
                    ${appData.matches.filter(m => m.status === 'scheduled' || m.status === 'live').map(match => `
                        <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: var(--bg-dark); margin-bottom: 10px; border-radius: 8px;">
                            <div>
                                <div style="font-weight: bold;">${match.homeTeam?.name || 'TBD'} vs ${match.awayTeam?.name || 'TBD'}</div>
                                <div style="color: var(--text-secondary); font-size: 12px;">${match.date} ${match.time}</div>
                            </div>
                            <button class="btn btn-small ${match.status === 'live' ? 'btn-success' : ''}" onclick="manageLiveMatch('${match._id}')">
                                ${match.status === 'live' ? 'Continue Live' : 'Start Live'}
                            </button>
                        </div>
                    `).join('')}
                `;
            } else {
                container.innerHTML = '<p style="color: var(--text-secondary)">No matches available for live management</p>';
            }
        }

        function renderAdmins() {
            const container = document.getElementById('adminsList');
            
            if (appData.admins.length > 0) {
                container.innerHTML = appData.admins.map(admin => `
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 15px; background: var(--bg-dark); margin-bottom: 10px; border-radius: 8px;">
                        <div style="display: flex; align-items: center; gap: 15px;">
                            <div style="width: 40px; height: 40px; background: var(--primary); border-radius: 8px; display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">
                                ${admin.username[0].toUpperCase()}
                            </div>
                            <div>
                                <div style="font-weight: bold;">${admin.username}</div>
                                <div style="color: var(--text-secondary); font-size: 12px;">${admin.role} • Created ${new Date(admin.createdAt).toLocaleDateString()}</div>
                            </div>
                        </div>
                        <div style="display: flex; gap: 10px;">
                            ${admin.username !== 'admin' ? `<button class="btn btn-small btn-danger" onclick="deleteAdmin('${admin.username}')">Delete</button>` : '<span style="color: var(--text-secondary); font-size: 12px;">Default Admin</span>'}
                        </div>
                    </div>
                `).join('');
            } else {
                container.innerHTML = '<p style="color: var(--text-secondary)">No admins found</p>';
            }
        }

        function updateOverviewStats() {
            document.getElementById('totalLeagues').textContent = appData.leagues.length;
            document.getElementById('totalTeams').textContent = appData.teams.length;
            document.getElementById('totalMatches').textContent = appData.matches.length;
            document.getElementById('liveCount').textContent = appData.liveMatches.length;
        }

        // Edit Functions
        function editTeam(teamId) {
            const team = appData.teams.find(t => t._id === teamId);
            if (team) {
                appData.editingItem = teamId;
                document.getElementById('teamName').value = team.name;
                document.getElementById('teamCoach').value = team.coach || '';
                document.getElementById('teamStadium').value = team.stadium || '';
                document.getElementById('teamModalTitle').textContent = 'Edit Team';
                document.getElementById('createTeamText').textContent = 'Update Team';
                document.getElementById('teamModal').classList.add('active');
            }
        }

        function editPlayer(playerId) {
            const player = appData.players.find(p => p._id === playerId);
            if (player) {
                appData.editingItem = playerId;
                
                // Populate team dropdown
                const teamSelect = document.getElementById('playerTeam');
                teamSelect.innerHTML = '<option value="">Select Team</option>';
                appData.teams.forEach(team => {
                    const option = document.createElement('option');
                    option.value = team._id;
                    option.textContent = team.name;
                    teamSelect.appendChild(option);
                });
                
                document.getElementById('playerName').value = player.name;
                document.getElementById('playerNumber').value = player.number;
                document.getElementById('playerPosition').value = player.position;
                document.getElementById('playerTeam').value = player.team?._id || player.team;
                document.getElementById('playerModalTitle').textContent = 'Edit Player';
                document.getElementById('createPlayerText').textContent = 'Update Player';
                document.getElementById('playerModal').classList.add('active');
            }
        }

        function editMatch(matchId) {
            const match = appData.matches.find(m => m._id === matchId);
            if (match) {
                appData.editingItem = matchId;
                
                // Populate team dropdowns
                populateTeamDropdowns();
                
                document.getElementById('matchHomeTeam').value = match.homeTeam._id;
                document.getElementById('matchAwayTeam').value = match.awayTeam._id;
                document.getElementById('matchDate').value = match.date;
                document.getElementById('matchTime').value = match.time;
                document.getElementById('matchRound').value = match.round;
                document.getElementById('matchModalTitle').textContent = 'Edit Match';
                document.getElementById('createMatchText').textContent = 'Update Match';
                document.getElementById('addMatchModal').classList.add('active');
            }
        }

        // Modal functions
        function openChangePasswordModal() {
            document.getElementById('changePasswordModal').classList.add('active');
        }

        function openUserModal() {
            document.getElementById('userModal').classList.add('active');
        }

        function openLeagueModal(leagueId = null) {
            appData.editingItem = leagueId;
            
            if (leagueId) {
                const league = appData.leagues.find(l => l._id === leagueId);
                if (league) {
                    document.getElementById('leagueName').value = league.name;
                    document.getElementById('leagueModalTitle').textContent = 'Edit League';
                    document.getElementById('createLeagueText').textContent = 'Update League';
                }
            } else {
                document.getElementById('leagueName').value = '';
                document.getElementById('leagueLogo').value = '';
                document.getElementById('leagueModalTitle').textContent = 'Create New League';
                document.getElementById('createLeagueText').textContent = 'Create League';
            }
            
            document.getElementById('leagueModal').classList.add('active');
        }

        function openTeamModal(teamId = null) {
            if (!appData.selectedLeague && !teamId) {
                showToast('Please select a league first', 'error');
                return;
            }
            
            appData.editingItem = teamId;
            
            if (teamId) {
                editTeam(teamId);
            } else {
                document.getElementById('teamName').value = '';
                document.getElementById('teamCoach').value = '';
                document.getElementById('teamStadium').value = '';
                document.getElementById('teamLogo').value = '';
                document.getElementById('teamModalTitle').textContent = 'Add New Team';
                document.getElementById('createTeamText').textContent = 'Add Team';
                document.getElementById('teamModal').classList.add('active');
            }
        }

        function openPlayerModal(playerId = null) {
            if (!appData.selectedLeague && !playerId) {
                showToast('Please select a league first', 'error');
                return;
            }
            
            appData.editingItem = playerId;
            
            const teamSelect = document.getElementById('playerTeam');
            teamSelect.innerHTML = '<option value="">Select Team</option>';
            appData.teams.forEach(team => {
                const option = document.createElement('option');
                option.value = team._id;
                option.textContent = team.name;
                teamSelect.appendChild(option);
            });
            
            if (playerId) {
                editPlayer(playerId);
            } else {
                document.getElementById('playerName').value = '';
                document.getElementById('playerNumber').value = '';
                document.getElementById('playerPosition').value = '';
                document.getElementById('playerTeam').value = '';
                document.getElementById('playerModalTitle').textContent = 'Add New Player';
                document.getElementById('createPlayerText').textContent = 'Add Player';
                document.getElementById('playerModal').classList.add('active');
            }
        }

        function openScheduleModal() {
            if (!appData.selectedLeague) {
                showToast('Please select a league first', 'error');
                return;
            }
            
            if (appData.teams.length < 2) {
                showToast('Need at least 2 teams to generate schedule', 'error');
                return;
            }
            
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            document.getElementById('scheduleStartDate').value = tomorrow.toISOString().split('T')[0];
            
            document.getElementById('scheduleModal').classList.add('active');
        }

        function openAddMatchModal(matchId = null) {
            if (!appData.selectedLeague && !matchId) {
                showToast('Please select a league first', 'error');
                return;
            }
            
            appData.editingItem = matchId;
            populateTeamDropdowns();
            
            if (matchId) {
                editMatch(matchId);
            } else {
                // Set default date to tomorrow
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                const dateStr = tomorrow.toISOString().split('T')[0];
                
                document.getElementById('matchHomeTeam').value = '';
                document.getElementById('matchAwayTeam').value = '';
                document.getElementById('matchDate').value = dateStr;
                document.getElementById('matchTime').value = '18:00';
                document.getElementById('matchRound').value = '1';
                document.getElementById('matchModalTitle').textContent = 'Add Single Match';
                document.getElementById('createMatchText').textContent = 'Add Match';
                document.getElementById('addMatchModal').classList.add('active');
            }
        }

        function randomizeTeams() {
            const homeSelect = document.getElementById('matchHomeTeam');
            const awaySelect = document.getElementById('matchAwayTeam');
            
            if (appData.teams.length < 2) {
                showToast('Need at least 2 teams to randomize', 'error');
                return;
            }
            
            // Get available teams (exclude empty option)
            const availableTeams = [...appData.teams];
            
            // Shuffle the teams array
            for (let i = availableTeams.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [availableTeams[i], availableTeams[j]] = [availableTeams[j], availableTeams[i]];
            }
            
            // Select first two teams
            const homeTeam = availableTeams[0];
            const awayTeam = availableTeams[1];
            
            // Set the selections
            homeSelect.value = homeTeam._id;
            awaySelect.value = awayTeam._id;
            
            showToast(`🎲 Selected: ${homeTeam.name} vs ${awayTeam.name}`, 'success');
        }

        function populateTeamDropdowns() {
            const homeSelect = document.getElementById('matchHomeTeam');
            const awaySelect = document.getElementById('matchAwayTeam');
            
            homeSelect.innerHTML = '<option value="">Select Home Team</option>';
            awaySelect.innerHTML = '<option value="">Select Away Team</option>';
            
            appData.teams.forEach(team => {
                const homeOption = document.createElement('option');
                homeOption.value = team._id;
                homeOption.textContent = team.name;
                homeSelect.appendChild(homeOption);
                
                const awayOption = document.createElement('option');
                awayOption.value = team._id;
                awayOption.textContent = team.name;
                awaySelect.appendChild(awayOption);
            });
        }

        function closeModal(modalId) {
            document.getElementById(modalId).classList.remove('active');
            appData.editingItem = null;
        }

        // Navigation
        function showSection(sectionName) {
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
                if (tab.getAttribute('data-section') === sectionName) {
                    tab.classList.add('active');
                }
            });

            document.querySelectorAll('.content-section').forEach(section => {
                section.classList.remove('active');
            });
            
            const targetSection = document.getElementById(sectionName);
            if (targetSection) {
                targetSection.classList.add('active');
            }
        }

        // Live Match Management
        function manageLiveMatch(matchId) {
            const match = appData.matches.find(m => m._id === matchId);
            if (!match) {
                showToast('Match not found', 'error');
                return;
            }
            
            // Get players for both teams
            const homePlayers = appData.players.filter(p => p.team._id === match.homeTeam._id);
            const awayPlayers = appData.players.filter(p => p.team._id === match.awayTeam._id);
            
            // Show live match interface
            document.getElementById('matchSelectionList').classList.add('hidden');
            document.getElementById('activeLiveMatch').classList.remove('hidden');
            
            // Populate live match interface
            document.getElementById('activeLiveMatch').innerHTML = `
                <div style="background: var(--bg-card); padding: 20px; border-radius: 15px; border: 2px solid var(--live);">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3 style="color: var(--live);">🔴 Live Match Control</h3>
                        <button class="btn btn-secondary" onclick="closeLiveMatch()">← Back to Selection</button>
                    </div>
                    
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h2 style="margin-bottom: 10px;">${match.homeTeam?.name || 'Home'} vs ${match.awayTeam?.name || 'Away'}</h2>
                        <div style="font-size: 48px; font-weight: bold; margin: 20px 0;">
                            <span id="liveHomeScore">${match.score?.home || 0}</span>
                            <span style="margin: 0 20px;">-</span>
                            <span id="liveAwayScore">${match.score?.away || 0}</span>
                        </div>
                        <div style="color: var(--text-secondary);">
                            Status: <span id="matchStatus" style="color: var(--live);">${match.status}</span> | 
                            Time: <span id="matchTime">${match.liveData?.currentMinute || 0}'</span>
                        </div>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-bottom: 20px;">
                        <button class="btn ${match.status === 'live' ? 'btn-success' : ''}" onclick="startMatch('${matchId}')" 
                                ${match.status === 'live' ? 'disabled' : ''}>
                            ${match.status === 'live' ? '✅ Live' : '▶️ Start Match'}
                        </button>
                        <button class="btn btn-warning" onclick="setHalftime('${matchId}')" 
                                ${match.status !== 'live' ? 'disabled' : ''}>
                            ⏸️ Half Time
                        </button>
                        <button class="btn" onclick="resumeMatch('${matchId}')" 
                                ${match.status !== 'halftime' ? 'disabled' : ''}>
                            ▶️ Resume
                        </button>
                        <button class="btn btn-danger" onclick="endMatch('${matchId}')" 
                                ${match.status === 'finished' ? 'disabled' : ''}>
                            ⏹️ End Match
                        </button>
                    </div>
                    
                    <!-- Time Control -->
                    <div style="text-align: center; margin-bottom: 20px; padding: 15px; background: var(--bg-dark); border-radius: 10px;">
                        <label style="margin-right: 10px;">Match Time:</label>
                        <input type="number" id="currentMinute" value="${match.liveData?.currentMinute || 0}" min="0" max="120" style="width: 80px; margin-right: 10px;">
                        <button class="btn btn-small" onclick="updateMatchTime('${matchId}')">Update Time</button>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
                        <div style="background: var(--bg-dark); padding: 15px; border-radius: 10px;">
                            <h4 style="color: var(--primary); margin-bottom: 15px;">${match.homeTeam?.name || 'Home'} Actions</h4>
                            
                            <!-- Goal Section -->
                            <div style="margin-bottom: 15px;">
                                <h5 style="color: var(--success); margin-bottom: 10px;">⚽ Goal</h5>
                                <select id="homeGoalScorer" style="width: 100%; margin-bottom: 5px;">
                                    <option value="">Select Goal Scorer</option>
                                    ${homePlayers.map(p => `<option value="${p._id}">#${p.number} ${p.name}</option>`).join('')}
                                </select>
                                <select id="homeAssist" style="width: 100%; margin-bottom: 10px;">
                                    <option value="">Select Assist (Optional)</option>
                                    ${homePlayers.map(p => `<option value="${p._id}">#${p.number} ${p.name}</option>`).join('')}
                                </select>
                                <button class="btn btn-success btn-small" onclick="addGoalWithPlayer('${matchId}', '${match.homeTeam?._id}', 'home')" style="width: 100%;">Add Goal</button>
                            </div>
                            
                            <!-- Cards Section -->
                            <div style="margin-bottom: 15px;">
                                <h5 style="color: var(--warning); margin-bottom: 10px;">🟨🟥 Cards</h5>
                                <select id="homeCardPlayer" style="width: 100%; margin-bottom: 10px;">
                                    <option value="">Select Player</option>
                                    ${homePlayers.map(p => `<option value="${p._id}">#${p.number} ${p.name}</option>`).join('')}
                                </select>
                                <div style="display: flex; gap: 5px;">
                                    <button class="btn btn-warning btn-small" onclick="addCardWithPlayer('${matchId}', '${match.homeTeam?._id}', 'yellow')" style="flex: 1;">🟨 Yellow</button>
                                    <button class="btn btn-danger btn-small" onclick="addCardWithPlayer('${matchId}', '${match.homeTeam?._id}', 'red')" style="flex: 1;">🟥 Red</button>
                                </div>
                            </div>
                        </div>
                        
                        <div style="background: var(--bg-dark); padding: 15px; border-radius: 10px;">
                            <h4 style="color: var(--primary); margin-bottom: 15px;">${match.awayTeam?.name || 'Away'} Actions</h4>
                            
                            <!-- Goal Section -->
                            <div style="margin-bottom: 15px;">
                                <h5 style="color: var(--success); margin-bottom: 10px;">⚽ Goal</h5>
                                <select id="awayGoalScorer" style="width: 100%; margin-bottom: 5px;">
                                    <option value="">Select Goal Scorer</option>
                                    ${awayPlayers.map(p => `<option value="${p._id}">#${p.number} ${p.name}</option>`).join('')}
                                </select>
                                <select id="awayAssist" style="width: 100%; margin-bottom: 10px;">
                                    <option value="">Select Assist (Optional)</option>
                                    ${awayPlayers.map(p => `<option value="${p._id}">#${p.number} ${p.name}</option>`).join('')}
                                </select>
                                <button class="btn btn-success btn-small" onclick="addGoalWithPlayer('${matchId}', '${match.awayTeam?._id}', 'away')" style="width: 100%;">Add Goal</button>
                            </div>
                            
                            <!-- Cards Section -->
                            <div style="margin-bottom: 15px;">
                                <h5 style="color: var(--warning); margin-bottom: 10px;">🟨🟥 Cards</h5>
                                <select id="awayCardPlayer" style="width: 100%; margin-bottom: 10px;">
                                    <option value="">Select Player</option>
                                    ${awayPlayers.map(p => `<option value="${p._id}">#${p.number} ${p.name}</option>`).join('')}
                                </select>
                                <div style="display: flex; gap: 5px;">
                                    <button class="btn btn-warning btn-small" onclick="addCardWithPlayer('${matchId}', '${match.awayTeam?._id}', 'yellow')" style="flex: 1;">🟨 Yellow</button>
                                    <button class="btn btn-danger btn-small" onclick="addCardWithPlayer('${matchId}', '${match.awayTeam?._id}', 'red')" style="flex: 1;">🟥 Red</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Quick Score Update -->
                    <div style="background: var(--bg-dark); padding: 15px; border-radius: 10px; margin-bottom: 20px;">
                        <h4 style="color: var(--primary); margin-bottom: 10px;">Quick Score Update</h4>
                        <div style="display: flex; gap: 10px; align-items: center; justify-content: center;">
                            <input type="number" id="manualHomeScore" value="${match.score?.home || 0}" min="0" style="width: 80px;">
                            <span style="font-size: 18px; font-weight: bold;">-</span>
                            <input type="number" id="manualAwayScore" value="${match.score?.away || 0}" min="0" style="width: 80px;">
                            <button class="btn btn-small" onclick="updateScore('${matchId}')">Update Score</button>
                        </div>
                        <p style="color: var(--text-secondary); font-size: 12px; text-align: center; margin-top: 5px;">
                            Use this for quick corrections. Goals added above will update player stats.
                        </p>
                    </div>
                    
                    <!-- Match Events -->
                    <div style="background: var(--bg-dark); padding: 15px; border-radius: 10px;">
                        <h4 style="color: var(--primary); margin-bottom: 15px;">📋 Match Events</h4>
                        <div id="matchEvents" style="max-height: 200px; overflow-y: auto;">
                            ${(match.events || []).map(event => `
                                <div style="padding: 8px; margin-bottom: 5px; background: var(--bg-card); border-radius: 5px; font-size: 14px;">
                                    <strong>${event.minute}'</strong> - ${event.description || event.type}
                                    ${event.player ? `(${getPlayerName(event.player)})` : ''}
                                </div>
                            `).join('') || '<p style="color: var(--text-secondary); text-align: center;">No events yet</p>'}
                        </div>
                    </div>
                </div>
            `;
        }
        
        function getPlayerName(playerId) {
            const player = appData.players.find(p => p._id === playerId);
            return player ? `#${player.number} ${player.name}` : 'Unknown Player';
        }
        
        function closeLiveMatch() {
            document.getElementById('matchSelectionList').classList.remove('hidden');
            document.getElementById('activeLiveMatch').classList.add('hidden');
            renderLiveMatches(); // Refresh the match list
        }

        async function addCardWithPlayer(matchId, teamId, cardType) {
            const playerSelect = document.getElementById(teamId === appData.matches.find(m => m._id === matchId).homeTeam._id ? 'homeCardPlayer' : 'awayCardPlayer');
            const playerId = playerSelect.value;
            const minute = parseInt(document.getElementById('currentMinute').value) || 0;
            
            if (!playerId) {
                showToast('Please select a player', 'error');
                return;
            }
            
            try {
                const player = appData.players.find(p => p._id === playerId);
                
                // Create match event
                const event = {
                    type: cardType + '_card',
                    minute: minute,
                    player: playerId,
                    team: teamId,
                    description: `${cardType === 'yellow' ? 'Yellow' : 'Red'} card for #${player.number} ${player.name}`,
                    timestamp: new Date().toISOString()
                };
                
                // Update match with event
                await apiCall('/matches', {
                    method: 'PUT',
                    body: JSON.stringify({
                        id: matchId,
                        events: { action: 'add', event: event }
                    })
                });
                
                // Update player statistics
                const statsUpdate = {
                    appearances: Math.max((player.stats?.appearances || 0), 1)
                };
                
                if (cardType === 'yellow') {
                    statsUpdate.yellowCards = (player.stats?.yellowCards || 0) + 1;
                } else {
                    statsUpdate.redCards = (player.stats?.redCards || 0) + 1;
                }
                
                await apiCall('/players', {
                    method: 'PUT',
                    body: JSON.stringify({
                        id: playerId,
                        stats: statsUpdate
                    })
                });
                
                // Reset selector
                playerSelect.value = '';
                
                // Add event to events list
                const eventsContainer = document.getElementById('matchEvents');
                const eventDiv = document.createElement('div');
                eventDiv.style.cssText = 'padding: 8px; margin-bottom: 5px; background: var(--bg-card); border-radius: 5px; font-size: 14px;';
                eventDiv.innerHTML = `<strong>${minute}'</strong> - ${event.description}`;
                eventsContainer.insertBefore(eventDiv, eventsContainer.firstChild);
                
                showToast(`${cardType === 'yellow' ? '🟨' : '🟥'} ${cardType} card for #${player.number} ${player.name}!`, cardType === 'yellow' ? 'warning' : 'error');
                
                // Refresh data
                await loadLeagueData(appData.selectedLeague);
                
            } catch (error) {
                console.error('Add card error:', error);
                showToast('Failed to add card', 'error');
            }
        }

        // Toast notifications
        function showToast(message, type = 'success') {
            const existingToast = document.querySelector('.toast');
            if (existingToast) {
                existingToast.remove();
            }
            
            const toast = document.createElement('div');
            toast.className = `toast ${type === 'error' ? 'error' : ''}`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    </script>
</body>
</html>
